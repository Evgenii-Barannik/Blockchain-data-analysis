<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="33872"><g><title>ethparser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.01%)</title><rect x="0.0000%" y="629" width="0.0148%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>ethparser`&lt;http_body_util::combinators::collect::Collect&lt;T&gt; as core::future::future::Future&gt;::poll (7 samples, 0.02%)</title><rect x="0.0148%" y="629" width="0.0207%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="7"/><text x="0.2648%" y="639.50"></text></g><g><title>ethparser`&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.01%)</title><rect x="0.0354%" y="629" width="0.0118%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="4"/><text x="0.2854%" y="639.50"></text></g><g><title>ethparser`__rdl_dealloc (13 samples, 0.04%)</title><rect x="0.0472%" y="629" width="0.0384%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="13"/><text x="0.2972%" y="639.50"></text></g><g><title>ethparser`__rust_dealloc (4 samples, 0.01%)</title><rect x="0.0856%" y="629" width="0.0118%" height="15" fill="rgb(208,68,35)" fg:x="29" fg:w="4"/><text x="0.3356%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (144 samples, 0.43%)</title><rect x="2.6039%" y="549" width="0.4251%" height="15" fill="rgb(232,128,0)" fg:x="882" fg:w="144"/><text x="2.8539%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (400 samples, 1.18%)</title><rect x="1.9515%" y="565" width="1.1809%" height="15" fill="rgb(207,160,47)" fg:x="661" fg:w="400"/><text x="2.2015%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (35 samples, 0.10%)</title><rect x="3.0291%" y="549" width="0.1033%" height="15" fill="rgb(228,23,34)" fg:x="1026" fg:w="35"/><text x="3.2791%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (457 samples, 1.35%)</title><rect x="1.7950%" y="597" width="1.3492%" height="15" fill="rgb(218,30,26)" fg:x="608" fg:w="457"/><text x="2.0450%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (424 samples, 1.25%)</title><rect x="1.8924%" y="581" width="1.2518%" height="15" fill="rgb(220,122,19)" fg:x="641" fg:w="424"/><text x="2.1424%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (4 samples, 0.01%)</title><rect x="3.1324%" y="565" width="0.0118%" height="15" fill="rgb(250,228,42)" fg:x="1061" fg:w="4"/><text x="3.3824%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (5 samples, 0.01%)</title><rect x="3.1442%" y="597" width="0.0148%" height="15" fill="rgb(240,193,28)" fg:x="1065" fg:w="5"/><text x="3.3942%" y="607.50"></text></g><g><title>ethparser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (654 samples, 1.93%)</title><rect x="1.6208%" y="613" width="1.9308%" height="15" fill="rgb(216,20,37)" fg:x="549" fg:w="654"/><text x="1.8708%" y="623.50">e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (133 samples, 0.39%)</title><rect x="3.1590%" y="597" width="0.3927%" height="15" fill="rgb(206,188,39)" fg:x="1070" fg:w="133"/><text x="3.4090%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (11 samples, 0.03%)</title><rect x="4.6853%" y="565" width="0.0325%" height="15" fill="rgb(217,207,13)" fg:x="1587" fg:w="11"/><text x="4.9353%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (240 samples, 0.71%)</title><rect x="5.6743%" y="533" width="0.7085%" height="15" fill="rgb(231,73,38)" fg:x="1922" fg:w="240"/><text x="5.9243%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (567 samples, 1.67%)</title><rect x="4.8565%" y="549" width="1.6739%" height="15" fill="rgb(225,20,46)" fg:x="1645" fg:w="567"/><text x="5.1065%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (50 samples, 0.15%)</title><rect x="6.3829%" y="533" width="0.1476%" height="15" fill="rgb(210,31,41)" fg:x="2162" fg:w="50"/><text x="6.6329%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (708 samples, 2.09%)</title><rect x="4.4609%" y="581" width="2.0902%" height="15" fill="rgb(221,200,47)" fg:x="1511" fg:w="708"/><text x="4.7109%" y="591.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (621 samples, 1.83%)</title><rect x="4.7178%" y="565" width="1.8334%" height="15" fill="rgb(226,26,5)" fg:x="1598" fg:w="621"/><text x="4.9678%" y="575.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (7 samples, 0.02%)</title><rect x="6.5305%" y="549" width="0.0207%" height="15" fill="rgb(249,33,26)" fg:x="2212" fg:w="7"/><text x="6.7805%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (14 samples, 0.04%)</title><rect x="6.5511%" y="581" width="0.0413%" height="15" fill="rgb(235,183,28)" fg:x="2219" fg:w="14"/><text x="6.8011%" y="591.50"></text></g><g><title>ethparser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (910 samples, 2.69%)</title><rect x="4.2572%" y="597" width="2.6866%" height="15" fill="rgb(221,5,38)" fg:x="1442" fg:w="910"/><text x="4.5072%" y="607.50">et..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (119 samples, 0.35%)</title><rect x="6.5925%" y="581" width="0.3513%" height="15" fill="rgb(247,18,42)" fg:x="2233" fg:w="119"/><text x="6.8425%" y="591.50"></text></g><g><title>ethparser`DYLD-STUB$$memcpy (8 samples, 0.02%)</title><rect x="6.9467%" y="597" width="0.0236%" height="15" fill="rgb(241,131,45)" fg:x="2353" fg:w="8"/><text x="7.1967%" y="607.50"></text></g><g><title>ethparser`__rdl_alloc (10 samples, 0.03%)</title><rect x="6.9704%" y="597" width="0.0295%" height="15" fill="rgb(249,31,29)" fg:x="2361" fg:w="10"/><text x="7.2204%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`madvise (80 samples, 0.24%)</title><rect x="7.0028%" y="597" width="0.2362%" height="15" fill="rgb(225,111,53)" fg:x="2372" fg:w="80"/><text x="7.2528%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.01%)</title><rect x="7.2390%" y="597" width="0.0148%" height="15" fill="rgb(238,160,17)" fg:x="2452" fg:w="5"/><text x="7.4890%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (164 samples, 0.48%)</title><rect x="7.4988%" y="581" width="0.4842%" height="15" fill="rgb(214,148,48)" fg:x="2540" fg:w="164"/><text x="7.7488%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free (259 samples, 0.76%)</title><rect x="7.2538%" y="597" width="0.7646%" height="15" fill="rgb(232,36,49)" fg:x="2457" fg:w="259"/><text x="7.5038%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (12 samples, 0.04%)</title><rect x="7.9830%" y="581" width="0.0354%" height="15" fill="rgb(209,103,24)" fg:x="2704" fg:w="12"/><text x="8.2330%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`malloc (4 samples, 0.01%)</title><rect x="8.0184%" y="597" width="0.0118%" height="15" fill="rgb(229,88,8)" fg:x="2716" fg:w="4"/><text x="8.2684%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (44 samples, 0.13%)</title><rect x="8.0302%" y="597" width="0.1299%" height="15" fill="rgb(213,181,19)" fg:x="2720" fg:w="44"/><text x="8.2802%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`madvise (126 samples, 0.37%)</title><rect x="8.9779%" y="565" width="0.3720%" height="15" fill="rgb(254,191,54)" fg:x="3041" fg:w="126"/><text x="9.2279%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (405 samples, 1.20%)</title><rect x="8.1601%" y="597" width="1.1957%" height="15" fill="rgb(241,83,37)" fg:x="2764" fg:w="405"/><text x="8.4101%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (130 samples, 0.38%)</title><rect x="8.9720%" y="581" width="0.3838%" height="15" fill="rgb(233,36,39)" fg:x="3039" fg:w="130"/><text x="9.2220%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.02%)</title><rect x="9.3558%" y="597" width="0.0207%" height="15" fill="rgb(226,3,54)" fg:x="3169" fg:w="7"/><text x="9.6058%" y="607.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (4 samples, 0.01%)</title><rect x="9.3765%" y="597" width="0.0118%" height="15" fill="rgb(245,192,40)" fg:x="3176" fg:w="4"/><text x="9.6265%" y="607.50"></text></g><g><title>ethparser`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,990 samples, 5.88%)</title><rect x="3.5516%" y="613" width="5.8751%" height="15" fill="rgb(238,167,29)" fg:x="1203" fg:w="1990"/><text x="3.8016%" y="623.50">ethpars..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.04%)</title><rect x="9.3883%" y="597" width="0.0384%" height="15" fill="rgb(232,182,51)" fg:x="3180" fg:w="13"/><text x="9.6383%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (7 samples, 0.02%)</title><rect x="10.6401%" y="565" width="0.0207%" height="15" fill="rgb(231,60,39)" fg:x="3604" fg:w="7"/><text x="10.8901%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (244 samples, 0.72%)</title><rect x="11.6586%" y="533" width="0.7204%" height="15" fill="rgb(208,69,12)" fg:x="3949" fg:w="244"/><text x="11.9086%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (567 samples, 1.67%)</title><rect x="10.8054%" y="549" width="1.6739%" height="15" fill="rgb(235,93,37)" fg:x="3660" fg:w="567"/><text x="11.0554%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (34 samples, 0.10%)</title><rect x="12.3790%" y="533" width="0.1004%" height="15" fill="rgb(213,116,39)" fg:x="4193" fg:w="34"/><text x="12.6290%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (696 samples, 2.05%)</title><rect x="10.4423%" y="581" width="2.0548%" height="15" fill="rgb(222,207,29)" fg:x="3537" fg:w="696"/><text x="10.6923%" y="591.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (622 samples, 1.84%)</title><rect x="10.6607%" y="565" width="1.8363%" height="15" fill="rgb(206,96,30)" fg:x="3611" fg:w="622"/><text x="10.9107%" y="575.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (6 samples, 0.02%)</title><rect x="12.4793%" y="549" width="0.0177%" height="15" fill="rgb(218,138,4)" fg:x="4227" fg:w="6"/><text x="12.7293%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (10 samples, 0.03%)</title><rect x="12.4970%" y="581" width="0.0295%" height="15" fill="rgb(250,191,14)" fg:x="4233" fg:w="10"/><text x="12.7470%" y="591.50"></text></g><g><title>ethparser`&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,967 samples, 8.76%)</title><rect x="10.1145%" y="597" width="8.7594%" height="15" fill="rgb(239,60,40)" fg:x="3426" fg:w="2967"/><text x="10.3645%" y="607.50">ethparser`&lt;a..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,149 samples, 6.34%)</title><rect x="12.5295%" y="581" width="6.3445%" height="15" fill="rgb(206,27,48)" fg:x="4244" fg:w="2149"/><text x="12.7795%" y="591.50">libsyste..</text></g><g><title>ethparser`DYLD-STUB$$memcpy (5 samples, 0.01%)</title><rect x="18.8769%" y="597" width="0.0148%" height="15" fill="rgb(225,35,8)" fg:x="6394" fg:w="5"/><text x="19.1269%" y="607.50"></text></g><g><title>ethparser`__rdl_alloc (15 samples, 0.04%)</title><rect x="18.8917%" y="597" width="0.0443%" height="15" fill="rgb(250,213,24)" fg:x="6399" fg:w="15"/><text x="19.1417%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`malloc (12 samples, 0.04%)</title><rect x="18.9449%" y="597" width="0.0354%" height="15" fill="rgb(247,123,22)" fg:x="6417" fg:w="12"/><text x="19.1949%" y="607.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (10 samples, 0.03%)</title><rect x="18.9803%" y="597" width="0.0295%" height="15" fill="rgb(231,138,38)" fg:x="6429" fg:w="10"/><text x="19.2303%" y="607.50"></text></g><g><title>ethparser`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,260 samples, 9.62%)</title><rect x="9.4355%" y="613" width="9.6245%" height="15" fill="rgb(231,145,46)" fg:x="3196" fg:w="3260"/><text x="9.6855%" y="623.50">ethparser`&lt;has..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (17 samples, 0.05%)</title><rect x="19.0098%" y="597" width="0.0502%" height="15" fill="rgb(251,118,11)" fg:x="6439" fg:w="17"/><text x="19.2598%" y="607.50"></text></g><g><title>ethparser`&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (13 samples, 0.04%)</title><rect x="19.0807%" y="597" width="0.0384%" height="15" fill="rgb(217,147,25)" fg:x="6463" fg:w="13"/><text x="19.3307%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (15 samples, 0.04%)</title><rect x="19.5117%" y="485" width="0.0443%" height="15" fill="rgb(247,81,37)" fg:x="6609" fg:w="15"/><text x="19.7617%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (25 samples, 0.07%)</title><rect x="19.4851%" y="501" width="0.0738%" height="15" fill="rgb(209,12,38)" fg:x="6600" fg:w="25"/><text x="19.7351%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (8 samples, 0.02%)</title><rect x="19.5678%" y="501" width="0.0236%" height="15" fill="rgb(227,1,9)" fg:x="6628" fg:w="8"/><text x="19.8178%" y="511.50"></text></g><g><title>ethparser`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (65 samples, 0.19%)</title><rect x="19.4054%" y="517" width="0.1919%" height="15" fill="rgb(248,47,43)" fg:x="6573" fg:w="65"/><text x="19.6554%" y="527.50"></text></g><g><title>ethparser`mio::waker::Waker::wake (4 samples, 0.01%)</title><rect x="19.6386%" y="469" width="0.0118%" height="15" fill="rgb(221,10,30)" fg:x="6652" fg:w="4"/><text x="19.8886%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (16 samples, 0.05%)</title><rect x="19.6593%" y="453" width="0.0472%" height="15" fill="rgb(210,229,1)" fg:x="6659" fg:w="16"/><text x="19.9093%" y="463.50"></text></g><g><title>ethparser`parking_lot::condvar::Condvar::notify_one_slow (20 samples, 0.06%)</title><rect x="19.6504%" y="469" width="0.0590%" height="15" fill="rgb(222,148,37)" fg:x="6656" fg:w="20"/><text x="19.9004%" y="479.50"></text></g><g><title>ethparser`tokio::runtime::driver::Handle::unpark (230 samples, 0.68%)</title><rect x="19.7095%" y="469" width="0.6790%" height="15" fill="rgb(234,67,33)" fg:x="6676" fg:w="230"/><text x="19.9595%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`kevent (225 samples, 0.66%)</title><rect x="19.7243%" y="453" width="0.6643%" height="15" fill="rgb(247,98,35)" fg:x="6681" fg:w="225"/><text x="19.9743%" y="463.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (12 samples, 0.04%)</title><rect x="20.3885%" y="469" width="0.0354%" height="15" fill="rgb(247,138,52)" fg:x="6906" fg:w="12"/><text x="20.6385%" y="479.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (13 samples, 0.04%)</title><rect x="20.4239%" y="469" width="0.0384%" height="15" fill="rgb(213,79,30)" fg:x="6918" fg:w="13"/><text x="20.6739%" y="479.50"></text></g><g><title>ethparser`tokio::runtime::context::with_scheduler (290 samples, 0.86%)</title><rect x="19.6298%" y="485" width="0.8562%" height="15" fill="rgb(246,177,23)" fg:x="6649" fg:w="290"/><text x="19.8798%" y="495.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (8 samples, 0.02%)</title><rect x="20.4623%" y="469" width="0.0236%" height="15" fill="rgb(230,62,27)" fg:x="6931" fg:w="8"/><text x="20.7123%" y="479.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (294 samples, 0.87%)</title><rect x="19.6268%" y="501" width="0.8680%" height="15" fill="rgb(216,154,8)" fg:x="6648" fg:w="294"/><text x="19.8768%" y="511.50"></text></g><g><title>ethparser`tokio::runtime::task::waker::wake_by_val (302 samples, 0.89%)</title><rect x="19.6150%" y="517" width="0.8916%" height="15" fill="rgb(244,35,45)" fg:x="6644" fg:w="302"/><text x="19.8650%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (6 samples, 0.02%)</title><rect x="20.5155%" y="517" width="0.0177%" height="15" fill="rgb(251,115,12)" fg:x="6949" fg:w="6"/><text x="20.7655%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (6 samples, 0.02%)</title><rect x="20.5155%" y="501" width="0.0177%" height="15" fill="rgb(240,54,50)" fg:x="6949" fg:w="6"/><text x="20.7655%" y="511.50"></text></g><g><title>ethparser`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (396 samples, 1.17%)</title><rect x="19.3729%" y="533" width="1.1691%" height="15" fill="rgb(233,84,52)" fg:x="6562" fg:w="396"/><text x="19.6229%" y="543.50"></text></g><g><title>ethparser`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (4 samples, 0.01%)</title><rect x="20.5479%" y="533" width="0.0118%" height="15" fill="rgb(207,117,47)" fg:x="6960" fg:w="4"/><text x="20.7979%" y="543.50"></text></g><g><title>ethparser`futures_core::task::__internal::atomic_waker::AtomicWaker::register (4 samples, 0.01%)</title><rect x="20.5598%" y="533" width="0.0118%" height="15" fill="rgb(249,43,39)" fg:x="6964" fg:w="4"/><text x="20.8098%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::park::clone (6 samples, 0.02%)</title><rect x="20.5716%" y="533" width="0.0177%" height="15" fill="rgb(209,38,44)" fg:x="6968" fg:w="6"/><text x="20.8216%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::task::waker::wake_by_val (6 samples, 0.02%)</title><rect x="20.5893%" y="533" width="0.0177%" height="15" fill="rgb(236,212,23)" fg:x="6974" fg:w="6"/><text x="20.8393%" y="543.50"></text></g><g><title>ethparser`&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (422 samples, 1.25%)</title><rect x="19.3670%" y="549" width="1.2459%" height="15" fill="rgb(242,79,21)" fg:x="6560" fg:w="422"/><text x="19.6170%" y="559.50"></text></g><g><title>ethparser`&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (502 samples, 1.48%)</title><rect x="19.1338%" y="565" width="1.4821%" height="15" fill="rgb(211,96,35)" fg:x="6481" fg:w="502"/><text x="19.3838%" y="575.50"></text></g><g><title>ethparser`&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (507 samples, 1.50%)</title><rect x="19.1220%" y="581" width="1.4968%" height="15" fill="rgb(253,215,40)" fg:x="6477" fg:w="507"/><text x="19.3720%" y="591.50"></text></g><g><title>ethparser`&lt;reqwest::async_impl::decoder::Decoder as http_body::Body&gt;::poll_frame (513 samples, 1.51%)</title><rect x="19.1190%" y="597" width="1.5145%" height="15" fill="rgb(211,81,21)" fg:x="6476" fg:w="513"/><text x="19.3690%" y="607.50"></text></g><g><title>ethparser`&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (5 samples, 0.01%)</title><rect x="20.6188%" y="581" width="0.0148%" height="15" fill="rgb(208,190,38)" fg:x="6984" fg:w="5"/><text x="20.8688%" y="591.50"></text></g><g><title>ethparser`&lt;http_body_util::combinators::collect::Collect&lt;T&gt; as core::future::future::Future&gt;::poll (541 samples, 1.60%)</title><rect x="19.0600%" y="613" width="1.5972%" height="15" fill="rgb(235,213,38)" fg:x="6456" fg:w="541"/><text x="19.3100%" y="623.50"></text></g><g><title>ethparser`http_body_util::collected::Collected&lt;B&gt;::push_frame (8 samples, 0.02%)</title><rect x="20.6336%" y="597" width="0.0236%" height="15" fill="rgb(237,122,38)" fg:x="6989" fg:w="8"/><text x="20.8836%" y="607.50"></text></g><g><title>ethparser`&lt;reqwest::async_impl::client::Client as core::default::Default&gt;::default (4 samples, 0.01%)</title><rect x="20.6572%" y="613" width="0.0118%" height="15" fill="rgb(244,218,35)" fg:x="6997" fg:w="4"/><text x="20.9072%" y="623.50"></text></g><g><title>ethparser`reqwest::async_impl::client::ClientBuilder::build (4 samples, 0.01%)</title><rect x="20.6572%" y="597" width="0.0118%" height="15" fill="rgb(240,68,47)" fg:x="6997" fg:w="4"/><text x="20.9072%" y="607.50"></text></g><g><title>ethparser`once_cell::imp::OnceCell&lt;T&gt;::initialize (4 samples, 0.01%)</title><rect x="20.6572%" y="581" width="0.0118%" height="15" fill="rgb(210,16,53)" fg:x="6997" fg:w="4"/><text x="20.9072%" y="591.50"></text></g><g><title>ethparser`once_cell::imp::initialize_or_wait (4 samples, 0.01%)</title><rect x="20.6572%" y="565" width="0.0118%" height="15" fill="rgb(235,124,12)" fg:x="6997" fg:w="4"/><text x="20.9072%" y="575.50"></text></g><g><title>ethparser`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (4 samples, 0.01%)</title><rect x="20.6572%" y="549" width="0.0118%" height="15" fill="rgb(224,169,11)" fg:x="6997" fg:w="4"/><text x="20.9072%" y="559.50"></text></g><g><title>ethparser`core::ops::function::FnOnce::call_once (4 samples, 0.01%)</title><rect x="20.6572%" y="533" width="0.0118%" height="15" fill="rgb(250,166,2)" fg:x="6997" fg:w="4"/><text x="20.9072%" y="543.50"></text></g><g><title>Security`Security::MDSSession::DbFilesInfo::updateForBundleDir (4 samples, 0.01%)</title><rect x="20.7103%" y="37" width="0.0118%" height="15" fill="rgb(242,216,29)" fg:x="7015" fg:w="4"/><text x="20.9603%" y="47.50"></text></g><g><title>Security`Security::MDSSession::updateDataBases (6 samples, 0.02%)</title><rect x="20.7074%" y="53" width="0.0177%" height="15" fill="rgb(230,116,27)" fg:x="7014" fg:w="6"/><text x="20.9574%" y="63.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::publicKey (8 samples, 0.02%)</title><rect x="20.7044%" y="245" width="0.0236%" height="15" fill="rgb(228,99,48)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="255.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::copyFirstFieldValue (8 samples, 0.02%)</title><rect x="20.7044%" y="229" width="0.0236%" height="15" fill="rgb(253,11,6)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="239.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::clHandle (8 samples, 0.02%)</title><rect x="20.7044%" y="213" width="0.0236%" height="15" fill="rgb(247,143,39)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="223.50"></text></g><g><title>Security`Security::CssmClient::AttachmentImpl::activate (8 samples, 0.02%)</title><rect x="20.7044%" y="197" width="0.0236%" height="15" fill="rgb(236,97,10)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="207.50"></text></g><g><title>Security`Security::CssmClient::ModuleImpl::activate (8 samples, 0.02%)</title><rect x="20.7044%" y="181" width="0.0236%" height="15" fill="rgb(233,208,19)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="191.50"></text></g><g><title>Security`CSSM_ModuleLoad (8 samples, 0.02%)</title><rect x="20.7044%" y="165" width="0.0236%" height="15" fill="rgb(216,164,2)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="175.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::fetch (8 samples, 0.02%)</title><rect x="20.7044%" y="149" width="0.0236%" height="15" fill="rgb(220,129,5)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="159.50"></text></g><g><title>Security`Security::CssmClient::Table&lt;Security::MDSClient::Common&gt;::startQuery (8 samples, 0.02%)</title><rect x="20.7044%" y="133" width="0.0236%" height="15" fill="rgb(242,17,10)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="143.50"></text></g><g><title>Security`Security::MDSClient::Directory::dlGetFirst (8 samples, 0.02%)</title><rect x="20.7044%" y="117" width="0.0236%" height="15" fill="rgb(242,107,0)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="127.50"></text></g><g><title>Security`Security::MDSClient::Directory::cdsa (8 samples, 0.02%)</title><rect x="20.7044%" y="101" width="0.0236%" height="15" fill="rgb(251,28,31)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="111.50"></text></g><g><title>Security`mds_DbOpen(long, char const*, cssm_net_address const*, unsigned int, cssm_access_credentials const*, void const*, long*) (8 samples, 0.02%)</title><rect x="20.7044%" y="85" width="0.0236%" height="15" fill="rgb(233,223,10)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="95.50"></text></g><g><title>Security`Security::MDSSession::DbOpen (8 samples, 0.02%)</title><rect x="20.7044%" y="69" width="0.0236%" height="15" fill="rgb(215,21,27)" fg:x="7013" fg:w="8"/><text x="20.9544%" y="79.50"></text></g><g><title>Security`tls_handshake_message_callback (12 samples, 0.04%)</title><rect x="20.6956%" y="309" width="0.0354%" height="15" fill="rgb(232,23,21)" fg:x="7010" fg:w="12"/><text x="20.9456%" y="319.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_set_peer_pubkey (12 samples, 0.04%)</title><rect x="20.6956%" y="293" width="0.0354%" height="15" fill="rgb(244,5,23)" fg:x="7010" fg:w="12"/><text x="20.9456%" y="303.50"></text></g><g><title>Security`SecTrustCopyPublicKey (10 samples, 0.03%)</title><rect x="20.7015%" y="277" width="0.0295%" height="15" fill="rgb(226,81,46)" fg:x="7012" fg:w="10"/><text x="20.9515%" y="287.50"></text></g><g><title>Security`SecCertificateCopyPublicKey (10 samples, 0.03%)</title><rect x="20.7015%" y="261" width="0.0295%" height="15" fill="rgb(247,70,30)" fg:x="7012" fg:w="10"/><text x="20.9515%" y="271.50"></text></g><g><title>ethparser`&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (15 samples, 0.04%)</title><rect x="20.6897%" y="421" width="0.0443%" height="15" fill="rgb(212,68,19)" fg:x="7008" fg:w="15"/><text x="20.9397%" y="431.50"></text></g><g><title>ethparser`native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (15 samples, 0.04%)</title><rect x="20.6897%" y="405" width="0.0443%" height="15" fill="rgb(240,187,13)" fg:x="7008" fg:w="15"/><text x="20.9397%" y="415.50"></text></g><g><title>ethparser`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (15 samples, 0.04%)</title><rect x="20.6897%" y="389" width="0.0443%" height="15" fill="rgb(223,113,26)" fg:x="7008" fg:w="15"/><text x="20.9397%" y="399.50"></text></g><g><title>Security`SSLHandshake (15 samples, 0.04%)</title><rect x="20.6897%" y="373" width="0.0443%" height="15" fill="rgb(206,192,2)" fg:x="7008" fg:w="15"/><text x="20.9397%" y="383.50"></text></g><g><title>Security`SSLHandshakeProceed (15 samples, 0.04%)</title><rect x="20.6897%" y="357" width="0.0443%" height="15" fill="rgb(241,108,4)" fg:x="7008" fg:w="15"/><text x="20.9397%" y="367.50"></text></g><g><title>libcoretls.dylib`tls_handshake_process (13 samples, 0.04%)</title><rect x="20.6956%" y="341" width="0.0384%" height="15" fill="rgb(247,173,49)" fg:x="7010" fg:w="13"/><text x="20.9456%" y="351.50"></text></g><g><title>libcoretls.dylib`SSLProcessHandshakeRecordInner (13 samples, 0.04%)</title><rect x="20.6956%" y="325" width="0.0384%" height="15" fill="rgb(224,114,35)" fg:x="7010" fg:w="13"/><text x="20.9456%" y="335.50"></text></g><g><title>ethparser`&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (20 samples, 0.06%)</title><rect x="20.6808%" y="549" width="0.0590%" height="15" fill="rgb(245,159,27)" fg:x="7005" fg:w="20"/><text x="20.9308%" y="559.50"></text></g><g><title>ethparser`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (20 samples, 0.06%)</title><rect x="20.6808%" y="533" width="0.0590%" height="15" fill="rgb(245,172,44)" fg:x="7005" fg:w="20"/><text x="20.9308%" y="543.50"></text></g><g><title>ethparser`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (20 samples, 0.06%)</title><rect x="20.6808%" y="517" width="0.0590%" height="15" fill="rgb(236,23,11)" fg:x="7005" fg:w="20"/><text x="20.9308%" y="527.50"></text></g><g><title>ethparser`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (20 samples, 0.06%)</title><rect x="20.6808%" y="501" width="0.0590%" height="15" fill="rgb(205,117,38)" fg:x="7005" fg:w="20"/><text x="20.9308%" y="511.50"></text></g><g><title>ethparser`&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (20 samples, 0.06%)</title><rect x="20.6808%" y="485" width="0.0590%" height="15" fill="rgb(237,72,25)" fg:x="7005" fg:w="20"/><text x="20.9308%" y="495.50"></text></g><g><title>ethparser`reqwest::connect::with_timeout::_{{closure}} (18 samples, 0.05%)</title><rect x="20.6867%" y="469" width="0.0531%" height="15" fill="rgb(244,70,9)" fg:x="7007" fg:w="18"/><text x="20.9367%" y="479.50"></text></g><g><title>ethparser`reqwest::connect::Connector::connect_with_maybe_proxy::_{{closure}} (18 samples, 0.05%)</title><rect x="20.6867%" y="453" width="0.0531%" height="15" fill="rgb(217,125,39)" fg:x="7007" fg:w="18"/><text x="20.9367%" y="463.50"></text></g><g><title>ethparser`&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (18 samples, 0.05%)</title><rect x="20.6867%" y="437" width="0.0531%" height="15" fill="rgb(235,36,10)" fg:x="7007" fg:w="18"/><text x="20.9367%" y="447.50"></text></g><g><title>ethparser`&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (27 samples, 0.08%)</title><rect x="20.6690%" y="613" width="0.0797%" height="15" fill="rgb(251,123,47)" fg:x="7001" fg:w="27"/><text x="20.9190%" y="623.50"></text></g><g><title>ethparser`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (27 samples, 0.08%)</title><rect x="20.6690%" y="597" width="0.0797%" height="15" fill="rgb(221,13,13)" fg:x="7001" fg:w="27"/><text x="20.9190%" y="607.50"></text></g><g><title>ethparser`&lt;hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future&gt;::poll (26 samples, 0.08%)</title><rect x="20.6719%" y="581" width="0.0768%" height="15" fill="rgb(238,131,9)" fg:x="7002" fg:w="26"/><text x="20.9219%" y="591.50"></text></g><g><title>ethparser`hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::_{{closure}} (25 samples, 0.07%)</title><rect x="20.6749%" y="565" width="0.0738%" height="15" fill="rgb(211,50,8)" fg:x="7003" fg:w="25"/><text x="20.9249%" y="575.50"></text></g><g><title>ethparser`&lt;reqwest::async_impl::decoder::Decoder as http_body::Body&gt;::poll_frame (4 samples, 0.01%)</title><rect x="20.7487%" y="613" width="0.0118%" height="15" fill="rgb(245,182,24)" fg:x="7028" fg:w="4"/><text x="20.9987%" y="623.50"></text></g><g><title>ethparser`DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="20.7723%" y="613" width="0.0118%" height="15" fill="rgb(242,14,37)" fg:x="7036" fg:w="4"/><text x="21.0223%" y="623.50"></text></g><g><title>ethparser`__rdl_dealloc (22 samples, 0.06%)</title><rect x="20.7900%" y="613" width="0.0650%" height="15" fill="rgb(246,228,12)" fg:x="7042" fg:w="22"/><text x="21.0400%" y="623.50"></text></g><g><title>ethparser`__rust_dealloc (6 samples, 0.02%)</title><rect x="20.8550%" y="613" width="0.0177%" height="15" fill="rgb(213,55,15)" fg:x="7064" fg:w="6"/><text x="21.1050%" y="623.50"></text></g><g><title>ethparser`core::hash::BuildHasher::hash_one (53 samples, 0.16%)</title><rect x="20.8727%" y="613" width="0.1565%" height="15" fill="rgb(209,9,3)" fg:x="7070" fg:w="53"/><text x="21.1227%" y="623.50"></text></g><g><title>ethparser`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 0.10%)</title><rect x="20.9288%" y="597" width="0.1004%" height="15" fill="rgb(230,59,30)" fg:x="7089" fg:w="34"/><text x="21.1788%" y="607.50"></text></g><g><title>ethparser`__rdl_dealloc (7 samples, 0.02%)</title><rect x="21.0380%" y="597" width="0.0207%" height="15" fill="rgb(209,121,21)" fg:x="7126" fg:w="7"/><text x="21.2880%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (257 samples, 0.76%)</title><rect x="21.4366%" y="565" width="0.7587%" height="15" fill="rgb(220,109,13)" fg:x="7261" fg:w="257"/><text x="21.6866%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free (336 samples, 0.99%)</title><rect x="21.2211%" y="581" width="0.9920%" height="15" fill="rgb(232,18,1)" fg:x="7188" fg:w="336"/><text x="21.4711%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.02%)</title><rect x="22.1953%" y="565" width="0.0177%" height="15" fill="rgb(215,41,42)" fg:x="7518" fg:w="6"/><text x="22.4453%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.01%)</title><rect x="22.2130%" y="581" width="0.0148%" height="15" fill="rgb(224,123,36)" fg:x="7524" fg:w="5"/><text x="22.4630%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.01%)</title><rect x="22.2160%" y="565" width="0.0118%" height="15" fill="rgb(240,125,3)" fg:x="7525" fg:w="4"/><text x="22.4660%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (32 samples, 0.09%)</title><rect x="22.2278%" y="581" width="0.0945%" height="15" fill="rgb(205,98,50)" fg:x="7529" fg:w="32"/><text x="22.4778%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`madvise (115 samples, 0.34%)</title><rect x="23.0367%" y="549" width="0.3395%" height="15" fill="rgb(205,185,37)" fg:x="7803" fg:w="115"/><text x="23.2867%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (117 samples, 0.35%)</title><rect x="23.0338%" y="565" width="0.3454%" height="15" fill="rgb(238,207,15)" fg:x="7802" fg:w="117"/><text x="23.2838%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (359 samples, 1.06%)</title><rect x="22.3223%" y="581" width="1.0599%" height="15" fill="rgb(213,199,42)" fg:x="7561" fg:w="359"/><text x="22.5723%" y="591.50"></text></g><g><title>ethparser`core::ptr::drop_in_place&lt;ethparser::RawTransaction&gt; (789 samples, 2.33%)</title><rect x="21.0587%" y="597" width="2.3294%" height="15" fill="rgb(235,201,11)" fg:x="7133" fg:w="789"/><text x="21.3087%" y="607.50">e..</text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.02%)</title><rect x="23.3880%" y="597" width="0.0207%" height="15" fill="rgb(207,46,11)" fg:x="7922" fg:w="7"/><text x="23.6380%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (7 samples, 0.02%)</title><rect x="23.4796%" y="581" width="0.0207%" height="15" fill="rgb(241,35,35)" fg:x="7953" fg:w="7"/><text x="23.7296%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.09%)</title><rect x="23.4087%" y="597" width="0.0945%" height="15" fill="rgb(243,32,47)" fg:x="7929" fg:w="32"/><text x="23.6587%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (7 samples, 0.02%)</title><rect x="23.5032%" y="597" width="0.0207%" height="15" fill="rgb(247,202,23)" fg:x="7961" fg:w="7"/><text x="23.7532%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (26 samples, 0.08%)</title><rect x="23.5239%" y="597" width="0.0768%" height="15" fill="rgb(219,102,11)" fg:x="7968" fg:w="26"/><text x="23.7739%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (7 samples, 0.02%)</title><rect x="23.5799%" y="581" width="0.0207%" height="15" fill="rgb(243,110,44)" fg:x="7987" fg:w="7"/><text x="23.8299%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.02%)</title><rect x="23.5799%" y="565" width="0.0207%" height="15" fill="rgb(222,74,54)" fg:x="7987" fg:w="7"/><text x="23.8299%" y="575.50"></text></g><g><title>ethparser`core::ptr::drop_in_place&lt;ethparser::TransactionResponse&gt; (872 samples, 2.57%)</title><rect x="21.0321%" y="613" width="2.5744%" height="15" fill="rgb(216,99,12)" fg:x="7124" fg:w="872"/><text x="21.2821%" y="623.50">et..</text></g><g><title>ethparser`core::slice::sort::insertion_sort_shift_left (4 samples, 0.01%)</title><rect x="23.6095%" y="613" width="0.0118%" height="15" fill="rgb(226,22,26)" fg:x="7997" fg:w="4"/><text x="23.8595%" y="623.50"></text></g><g><title>ethparser`core::slice::sort::insertion_sort_shift_left (71 samples, 0.21%)</title><rect x="25.8532%" y="597" width="0.2096%" height="15" fill="rgb(217,163,10)" fg:x="8757" fg:w="71"/><text x="26.1032%" y="607.50"></text></g><g><title>ethparser`core::slice::sort::merge_sort (1,060 samples, 3.13%)</title><rect x="23.6213%" y="613" width="3.1294%" height="15" fill="rgb(213,25,53)" fg:x="8001" fg:w="1060"/><text x="23.8713%" y="623.50">eth..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (233 samples, 0.69%)</title><rect x="26.0628%" y="597" width="0.6879%" height="15" fill="rgb(252,105,26)" fg:x="8828" fg:w="233"/><text x="26.3128%" y="607.50"></text></g><g><title>ethparser`core::hash::BuildHasher::hash_one (35 samples, 0.10%)</title><rect x="27.7279%" y="597" width="0.1033%" height="15" fill="rgb(220,39,43)" fg:x="9392" fg:w="35"/><text x="27.9779%" y="607.50"></text></g><g><title>ethparser`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.05%)</title><rect x="27.7781%" y="581" width="0.0531%" height="15" fill="rgb(229,68,48)" fg:x="9409" fg:w="18"/><text x="28.0281%" y="591.50"></text></g><g><title>ethparser`core::hash::BuildHasher::hash_one (464 samples, 1.37%)</title><rect x="27.8873%" y="581" width="1.3699%" height="15" fill="rgb(252,8,32)" fg:x="9446" fg:w="464"/><text x="28.1373%" y="591.50"></text></g><g><title>ethparser`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (425 samples, 1.25%)</title><rect x="28.0025%" y="565" width="1.2547%" height="15" fill="rgb(223,20,43)" fg:x="9485" fg:w="425"/><text x="28.2525%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.06%)</title><rect x="29.2572%" y="581" width="0.0590%" height="15" fill="rgb(229,81,49)" fg:x="9910" fg:w="20"/><text x="29.5072%" y="591.50"></text></g><g><title>ethparser`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (687 samples, 2.03%)</title><rect x="27.8312%" y="597" width="2.0282%" height="15" fill="rgb(236,28,36)" fg:x="9427" fg:w="687"/><text x="28.0812%" y="607.50">e..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (183 samples, 0.54%)</title><rect x="29.3192%" y="581" width="0.5403%" height="15" fill="rgb(249,185,26)" fg:x="9931" fg:w="183"/><text x="29.5692%" y="591.50"></text></g><g><title>ethparser`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,055 samples, 3.11%)</title><rect x="26.7507%" y="613" width="3.1147%" height="15" fill="rgb(249,174,33)" fg:x="9061" fg:w="1055"/><text x="27.0007%" y="623.50">eth..</text></g><g><title>ethparser`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.01%)</title><rect x="30.4529%" y="597" width="0.0148%" height="15" fill="rgb(233,201,37)" fg:x="10315" fg:w="5"/><text x="30.7029%" y="607.50"></text></g><g><title>ethparser`core::hash::BuildHasher::hash_one (75 samples, 0.22%)</title><rect x="30.4676%" y="597" width="0.2214%" height="15" fill="rgb(221,78,26)" fg:x="10320" fg:w="75"/><text x="30.7176%" y="607.50"></text></g><g><title>ethparser`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (47 samples, 0.14%)</title><rect x="30.5503%" y="581" width="0.1388%" height="15" fill="rgb(250,127,30)" fg:x="10348" fg:w="47"/><text x="30.8003%" y="591.50"></text></g><g><title>ethparser`core::hash::BuildHasher::hash_one (116 samples, 0.34%)</title><rect x="30.7865%" y="581" width="0.3425%" height="15" fill="rgb(230,49,44)" fg:x="10428" fg:w="116"/><text x="31.0365%" y="591.50"></text></g><g><title>ethparser`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (108 samples, 0.32%)</title><rect x="30.8101%" y="565" width="0.3188%" height="15" fill="rgb(229,67,23)" fg:x="10436" fg:w="108"/><text x="31.0601%" y="575.50"></text></g><g><title>ethparser`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (153 samples, 0.45%)</title><rect x="30.6891%" y="597" width="0.4517%" height="15" fill="rgb(249,83,47)" fg:x="10395" fg:w="153"/><text x="30.9391%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="31.1290%" y="581" width="0.0118%" height="15" fill="rgb(215,43,3)" fg:x="10544" fg:w="4"/><text x="31.3790%" y="591.50"></text></g><g><title>ethparser`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (504 samples, 1.49%)</title><rect x="29.8654%" y="613" width="1.4880%" height="15" fill="rgb(238,154,13)" fg:x="10116" fg:w="504"/><text x="30.1154%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (72 samples, 0.21%)</title><rect x="31.1408%" y="597" width="0.2126%" height="15" fill="rgb(219,56,2)" fg:x="10548" fg:w="72"/><text x="31.3908%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.01%)</title><rect x="31.3799%" y="565" width="0.0148%" height="15" fill="rgb(233,0,4)" fg:x="10629" fg:w="5"/><text x="31.6299%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`small_size (4 samples, 0.01%)</title><rect x="31.3829%" y="549" width="0.0118%" height="15" fill="rgb(235,30,7)" fg:x="10630" fg:w="4"/><text x="31.6329%" y="559.50"></text></g><g><title>ethparser`bytes::bytes_mut::shared_v_drop (21 samples, 0.06%)</title><rect x="31.3622%" y="581" width="0.0620%" height="15" fill="rgb(250,79,13)" fg:x="10623" fg:w="21"/><text x="31.6122%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.03%)</title><rect x="31.3947%" y="565" width="0.0295%" height="15" fill="rgb(211,146,34)" fg:x="10634" fg:w="10"/><text x="31.6447%" y="575.50"></text></g><g><title>ethparser`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (440 samples, 1.30%)</title><rect x="31.3563%" y="597" width="1.2990%" height="15" fill="rgb(228,22,38)" fg:x="10621" fg:w="440"/><text x="31.6063%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (413 samples, 1.22%)</title><rect x="31.4360%" y="581" width="1.2193%" height="15" fill="rgb(235,168,5)" fg:x="10648" fg:w="413"/><text x="31.6860%" y="591.50"></text></g><g><title>ethparser`http_body_util::collected::Collected&lt;B&gt;::to_bytes (441 samples, 1.30%)</title><rect x="31.3563%" y="613" width="1.3020%" height="15" fill="rgb(221,155,16)" fg:x="10621" fg:w="441"/><text x="31.6063%" y="623.50"></text></g><g><title>ethparser`petgraph::graph_impl::Graph&lt;N,E,Ty,Ix&gt;::add_edge (166 samples, 0.49%)</title><rect x="32.6612%" y="613" width="0.4901%" height="15" fill="rgb(215,215,53)" fg:x="11063" fg:w="166"/><text x="32.9112%" y="623.50"></text></g><g><title>ethparser`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (8 samples, 0.02%)</title><rect x="33.1897%" y="533" width="0.0236%" height="15" fill="rgb(223,4,10)" fg:x="11242" fg:w="8"/><text x="33.4397%" y="543.50"></text></g><g><title>ethparser`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (840 samples, 2.48%)</title><rect x="34.3263%" y="501" width="2.4799%" height="15" fill="rgb(234,103,6)" fg:x="11627" fg:w="840"/><text x="34.5763%" y="511.50">et..</text></g><g><title>ethparser`core::str::converts::from_utf8 (239 samples, 0.71%)</title><rect x="36.1006%" y="485" width="0.7056%" height="15" fill="rgb(227,97,0)" fg:x="12228" fg:w="239"/><text x="36.3506%" y="495.50"></text></g><g><title>ethparser`core::str::converts::from_utf8 (7 samples, 0.02%)</title><rect x="36.8062%" y="501" width="0.0207%" height="15" fill="rgb(234,150,53)" fg:x="12467" fg:w="7"/><text x="37.0562%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (249 samples, 0.74%)</title><rect x="38.2853%" y="453" width="0.7351%" height="15" fill="rgb(228,201,54)" fg:x="12968" fg:w="249"/><text x="38.5353%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (639 samples, 1.89%)</title><rect x="37.2195%" y="469" width="1.8865%" height="15" fill="rgb(222,22,37)" fg:x="12607" fg:w="639"/><text x="37.4695%" y="479.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (29 samples, 0.09%)</title><rect x="39.0204%" y="453" width="0.0856%" height="15" fill="rgb(237,53,32)" fg:x="13217" fg:w="29"/><text x="39.2704%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (694 samples, 2.05%)</title><rect x="37.0985%" y="485" width="2.0489%" height="15" fill="rgb(233,25,53)" fg:x="12566" fg:w="694"/><text x="37.3485%" y="495.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (14 samples, 0.04%)</title><rect x="39.1060%" y="469" width="0.0413%" height="15" fill="rgb(210,40,34)" fg:x="13246" fg:w="14"/><text x="39.3560%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (790 samples, 2.33%)</title><rect x="36.8269%" y="501" width="2.3323%" height="15" fill="rgb(241,220,44)" fg:x="12474" fg:w="790"/><text x="37.0769%" y="511.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.01%)</title><rect x="39.1474%" y="485" width="0.0118%" height="15" fill="rgb(235,28,35)" fg:x="13260" fg:w="4"/><text x="39.3974%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.01%)</title><rect x="39.1474%" y="469" width="0.0118%" height="15" fill="rgb(210,56,17)" fg:x="13260" fg:w="4"/><text x="39.3974%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (13 samples, 0.04%)</title><rect x="39.1592%" y="501" width="0.0384%" height="15" fill="rgb(224,130,29)" fg:x="13264" fg:w="13"/><text x="39.4092%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.02%)</title><rect x="39.1976%" y="501" width="0.0207%" height="15" fill="rgb(235,212,8)" fg:x="13277" fg:w="7"/><text x="39.4476%" y="511.50"></text></g><g><title>ethparser`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (1,941 samples, 5.73%)</title><rect x="33.8510%" y="517" width="5.7304%" height="15" fill="rgb(223,33,50)" fg:x="11466" fg:w="1941"/><text x="34.1010%" y="527.50">ethpars..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (123 samples, 0.36%)</title><rect x="39.2182%" y="501" width="0.3631%" height="15" fill="rgb(219,149,13)" fg:x="13284" fg:w="123"/><text x="39.4682%" y="511.50"></text></g><g><title>ethparser`&lt;ethparser::_::&lt;impl serde::de::Deserialize for ethparser::RawTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (119 samples, 0.35%)</title><rect x="39.5814%" y="517" width="0.3513%" height="15" fill="rgb(250,156,29)" fg:x="13407" fg:w="119"/><text x="39.8314%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (25 samples, 0.07%)</title><rect x="39.8589%" y="501" width="0.0738%" height="15" fill="rgb(216,193,19)" fg:x="13501" fg:w="25"/><text x="40.1089%" y="511.50"></text></g><g><title>ethparser`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (553 samples, 1.63%)</title><rect x="39.9356%" y="517" width="1.6326%" height="15" fill="rgb(216,135,14)" fg:x="13527" fg:w="553"/><text x="40.1856%" y="527.50"></text></g><g><title>ethparser`core::str::converts::from_utf8 (205 samples, 0.61%)</title><rect x="40.9630%" y="501" width="0.6052%" height="15" fill="rgb(241,47,5)" fg:x="13875" fg:w="205"/><text x="41.2130%" y="511.50"></text></g><g><title>ethparser`DYLD-STUB$$memcpy (8 samples, 0.02%)</title><rect x="41.5742%" y="517" width="0.0236%" height="15" fill="rgb(233,42,35)" fg:x="14082" fg:w="8"/><text x="41.8242%" y="527.50"></text></g><g><title>ethparser`__rdl_alloc (11 samples, 0.03%)</title><rect x="41.5978%" y="517" width="0.0325%" height="15" fill="rgb(231,13,6)" fg:x="14090" fg:w="11"/><text x="41.8478%" y="527.50"></text></g><g><title>ethparser`core::str::converts::from_utf8 (6 samples, 0.02%)</title><rect x="41.6332%" y="517" width="0.0177%" height="15" fill="rgb(207,181,40)" fg:x="14102" fg:w="6"/><text x="41.8832%" y="527.50"></text></g><g><title>ethparser`serde::de::MapAccess::next_value (15 samples, 0.04%)</title><rect x="41.6509%" y="517" width="0.0443%" height="15" fill="rgb(254,173,49)" fg:x="14108" fg:w="15"/><text x="41.9009%" y="527.50"></text></g><g><title>ethparser`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (5 samples, 0.01%)</title><rect x="41.6804%" y="501" width="0.0148%" height="15" fill="rgb(221,1,38)" fg:x="14118" fg:w="5"/><text x="41.9304%" y="511.50"></text></g><g><title>ethparser`serde_json::de::Deserializer&lt;R&gt;::end_map (5 samples, 0.01%)</title><rect x="41.6952%" y="517" width="0.0148%" height="15" fill="rgb(206,124,46)" fg:x="14123" fg:w="5"/><text x="41.9452%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.03%)</title><rect x="41.7100%" y="517" width="0.0325%" height="15" fill="rgb(249,21,11)" fg:x="14128" fg:w="11"/><text x="41.9600%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.02%)</title><rect x="41.7424%" y="517" width="0.0236%" height="15" fill="rgb(222,201,40)" fg:x="14139" fg:w="8"/><text x="41.9924%" y="527.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (4 samples, 0.01%)</title><rect x="41.7749%" y="517" width="0.0118%" height="15" fill="rgb(235,61,29)" fg:x="14150" fg:w="4"/><text x="42.0249%" y="527.50"></text></g><g><title>ethparser`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2,944 samples, 8.69%)</title><rect x="33.2133%" y="533" width="8.6915%" height="15" fill="rgb(219,207,3)" fg:x="11250" fg:w="2944"/><text x="33.4633%" y="543.50">ethparser`&lt;&amp;..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (37 samples, 0.11%)</title><rect x="41.7956%" y="517" width="0.1092%" height="15" fill="rgb(222,56,46)" fg:x="14157" fg:w="37"/><text x="42.0456%" y="527.50"></text></g><g><title>ethparser`&lt;ethparser::_::&lt;impl serde::de::Deserialize for ethparser::RawTransaction&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (5 samples, 0.01%)</title><rect x="41.9048%" y="533" width="0.0148%" height="15" fill="rgb(239,76,54)" fg:x="14194" fg:w="5"/><text x="42.1548%" y="543.50"></text></g><g><title>ethparser`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (14 samples, 0.04%)</title><rect x="41.9196%" y="533" width="0.0413%" height="15" fill="rgb(231,124,27)" fg:x="14199" fg:w="14"/><text x="42.1696%" y="543.50"></text></g><g><title>ethparser`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,998 samples, 8.85%)</title><rect x="33.1631%" y="549" width="8.8510%" height="15" fill="rgb(249,195,6)" fg:x="11233" fg:w="2998"/><text x="33.4131%" y="559.50">ethparser`&lt;se..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.04%)</title><rect x="41.9698%" y="533" width="0.0443%" height="15" fill="rgb(237,174,47)" fg:x="14216" fg:w="15"/><text x="42.2198%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (26 samples, 0.08%)</title><rect x="42.0200%" y="469" width="0.0768%" height="15" fill="rgb(206,201,31)" fg:x="14233" fg:w="26"/><text x="42.2700%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (26 samples, 0.08%)</title><rect x="42.0200%" y="453" width="0.0768%" height="15" fill="rgb(231,57,52)" fg:x="14233" fg:w="26"/><text x="42.2700%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (11 samples, 0.03%)</title><rect x="42.1026%" y="469" width="0.0325%" height="15" fill="rgb(248,177,22)" fg:x="14261" fg:w="11"/><text x="42.3526%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (11 samples, 0.03%)</title><rect x="42.1026%" y="453" width="0.0325%" height="15" fill="rgb(215,211,37)" fg:x="14261" fg:w="11"/><text x="42.3526%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (11 samples, 0.03%)</title><rect x="42.1026%" y="437" width="0.0325%" height="15" fill="rgb(241,128,51)" fg:x="14261" fg:w="11"/><text x="42.3526%" y="447.50"></text></g><g><title>ethparser`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (135 samples, 0.40%)</title><rect x="42.0170%" y="549" width="0.3986%" height="15" fill="rgb(227,165,31)" fg:x="14232" fg:w="135"/><text x="42.2670%" y="559.50"></text></g><g><title>ethparser`alloc::raw_vec::finish_grow (135 samples, 0.40%)</title><rect x="42.0170%" y="533" width="0.3986%" height="15" fill="rgb(228,167,24)" fg:x="14232" fg:w="135"/><text x="42.2670%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`realloc (135 samples, 0.40%)</title><rect x="42.0170%" y="517" width="0.3986%" height="15" fill="rgb(228,143,12)" fg:x="14232" fg:w="135"/><text x="42.2670%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (135 samples, 0.40%)</title><rect x="42.0170%" y="501" width="0.3986%" height="15" fill="rgb(249,149,8)" fg:x="14232" fg:w="135"/><text x="42.2670%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (135 samples, 0.40%)</title><rect x="42.0170%" y="485" width="0.3986%" height="15" fill="rgb(243,35,44)" fg:x="14232" fg:w="135"/><text x="42.2670%" y="495.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (93 samples, 0.27%)</title><rect x="42.1410%" y="469" width="0.2746%" height="15" fill="rgb(246,89,9)" fg:x="14274" fg:w="93"/><text x="42.3910%" y="479.50"></text></g><g><title>ethparser`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,328 samples, 9.83%)</title><rect x="33.1601%" y="565" width="9.8252%" height="15" fill="rgb(233,213,13)" fg:x="11232" fg:w="3328"/><text x="33.4101%" y="575.50">ethparser`&lt;ser..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (192 samples, 0.57%)</title><rect x="42.4185%" y="549" width="0.5668%" height="15" fill="rgb(233,141,41)" fg:x="14368" fg:w="192"/><text x="42.6685%" y="559.50"></text></g><g><title>ethparser`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,332 samples, 9.84%)</title><rect x="33.1601%" y="581" width="9.8370%" height="15" fill="rgb(239,167,4)" fg:x="11232" fg:w="3332"/><text x="33.4101%" y="591.50">ethparser`&lt;&amp;mu..</text></g><g><title>ethparser`serde_json::de::from_slice (3,333 samples, 9.84%)</title><rect x="33.1601%" y="613" width="9.8400%" height="15" fill="rgb(209,217,16)" fg:x="11232" fg:w="3333"/><text x="33.4101%" y="623.50">ethparser`serd..</text></g><g><title>ethparser`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,333 samples, 9.84%)</title><rect x="33.1601%" y="597" width="9.8400%" height="15" fill="rgb(219,88,35)" fg:x="11232" fg:w="3333"/><text x="33.4101%" y="607.50">ethparser`&lt;&amp;mu..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (467 samples, 1.38%)</title><rect x="43.1241%" y="581" width="1.3787%" height="15" fill="rgb(220,193,23)" fg:x="14607" fg:w="467"/><text x="43.3741%" y="591.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (17 samples, 0.05%)</title><rect x="44.5737%" y="565" width="0.0502%" height="15" fill="rgb(230,90,52)" fg:x="15098" fg:w="17"/><text x="44.8237%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (16 samples, 0.05%)</title><rect x="44.5766%" y="549" width="0.0472%" height="15" fill="rgb(252,106,19)" fg:x="15099" fg:w="16"/><text x="44.8266%" y="559.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.02%)</title><rect x="44.6239%" y="565" width="0.0207%" height="15" fill="rgb(206,74,20)" fg:x="15115" fg:w="7"/><text x="44.8739%" y="575.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (58 samples, 0.17%)</title><rect x="44.5087%" y="581" width="0.1712%" height="15" fill="rgb(230,138,44)" fg:x="15076" fg:w="58"/><text x="44.7587%" y="591.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (12 samples, 0.04%)</title><rect x="44.6445%" y="565" width="0.0354%" height="15" fill="rgb(235,182,43)" fg:x="15122" fg:w="12"/><text x="44.8945%" y="575.50"></text></g><g><title>ethparser`parking_lot::condvar::Condvar::wait_until_internal (565 samples, 1.67%)</title><rect x="43.0385%" y="597" width="1.6680%" height="15" fill="rgb(242,16,51)" fg:x="14578" fg:w="565"/><text x="43.2885%" y="607.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (5 samples, 0.01%)</title><rect x="44.6918%" y="581" width="0.0148%" height="15" fill="rgb(248,9,4)" fg:x="15138" fg:w="5"/><text x="44.9418%" y="591.50"></text></g><g><title>ethparser`tokio::runtime::park::Inner::park (583 samples, 1.72%)</title><rect x="43.0060%" y="613" width="1.7212%" height="15" fill="rgb(210,31,22)" fg:x="14567" fg:w="583"/><text x="43.2560%" y="623.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (5 samples, 0.01%)</title><rect x="44.7124%" y="597" width="0.0148%" height="15" fill="rgb(239,54,39)" fg:x="15145" fg:w="5"/><text x="44.9624%" y="607.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.01%)</title><rect x="44.7272%" y="613" width="0.0118%" height="15" fill="rgb(230,99,41)" fg:x="15150" fg:w="4"/><text x="44.9772%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`madvise (159 samples, 0.47%)</title><rect x="44.7390%" y="613" width="0.4694%" height="15" fill="rgb(253,106,12)" fg:x="15154" fg:w="159"/><text x="44.9890%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.02%)</title><rect x="45.2084%" y="613" width="0.0236%" height="15" fill="rgb(213,46,41)" fg:x="15313" fg:w="8"/><text x="45.4584%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.02%)</title><rect x="45.2321%" y="613" width="0.0236%" height="15" fill="rgb(215,133,35)" fg:x="15321" fg:w="8"/><text x="45.4821%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (463 samples, 1.37%)</title><rect x="45.5361%" y="597" width="1.3669%" height="15" fill="rgb(213,28,5)" fg:x="15424" fg:w="463"/><text x="45.7861%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (571 samples, 1.69%)</title><rect x="45.2557%" y="613" width="1.6858%" height="15" fill="rgb(215,77,49)" fg:x="15329" fg:w="571"/><text x="45.5057%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (13 samples, 0.04%)</title><rect x="46.9030%" y="597" width="0.0384%" height="15" fill="rgb(248,100,22)" fg:x="15887" fg:w="13"/><text x="47.1530%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free_large (23 samples, 0.07%)</title><rect x="46.9414%" y="613" width="0.0679%" height="15" fill="rgb(208,67,9)" fg:x="15900" fg:w="23"/><text x="47.1914%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (21 samples, 0.06%)</title><rect x="46.9473%" y="597" width="0.0620%" height="15" fill="rgb(219,133,21)" fg:x="15902" fg:w="21"/><text x="47.1973%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (21 samples, 0.06%)</title><rect x="46.9473%" y="581" width="0.0620%" height="15" fill="rgb(246,46,29)" fg:x="15902" fg:w="21"/><text x="47.1973%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.02%)</title><rect x="47.0093%" y="613" width="0.0177%" height="15" fill="rgb(246,185,52)" fg:x="15923" fg:w="6"/><text x="47.2593%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (44 samples, 0.13%)</title><rect x="47.0270%" y="613" width="0.1299%" height="15" fill="rgb(252,136,11)" fg:x="15929" fg:w="44"/><text x="47.2770%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`madvise (170 samples, 0.50%)</title><rect x="48.0751%" y="581" width="0.5019%" height="15" fill="rgb(219,138,53)" fg:x="16284" fg:w="170"/><text x="48.3251%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (485 samples, 1.43%)</title><rect x="47.1569%" y="613" width="1.4319%" height="15" fill="rgb(211,51,23)" fg:x="15973" fg:w="485"/><text x="47.4069%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (176 samples, 0.52%)</title><rect x="48.0692%" y="597" width="0.5196%" height="15" fill="rgb(247,221,28)" fg:x="16282" fg:w="176"/><text x="48.3192%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (4 samples, 0.01%)</title><rect x="48.5770%" y="581" width="0.0118%" height="15" fill="rgb(251,222,45)" fg:x="16454" fg:w="4"/><text x="48.8270%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (6 samples, 0.02%)</title><rect x="48.5888%" y="613" width="0.0177%" height="15" fill="rgb(217,162,53)" fg:x="16458" fg:w="6"/><text x="48.8388%" y="623.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (6 samples, 0.02%)</title><rect x="48.6095%" y="613" width="0.0177%" height="15" fill="rgb(229,93,14)" fg:x="16465" fg:w="6"/><text x="48.8595%" y="623.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (318 samples, 0.94%)</title><rect x="48.6272%" y="613" width="0.9388%" height="15" fill="rgb(209,67,49)" fg:x="16471" fg:w="318"/><text x="48.8772%" y="623.50"></text></g><g><title>ethparser`tokio::runtime::park::CachedParkThread::block_on (16,766 samples, 49.50%)</title><rect x="0.1004%" y="629" width="49.4981%" height="15" fill="rgb(213,87,29)" fg:x="34" fg:w="16766"/><text x="0.3504%" y="639.50">ethparser`tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.03%)</title><rect x="49.5660%" y="613" width="0.0325%" height="15" fill="rgb(205,151,52)" fg:x="16789" fg:w="11"/><text x="49.8160%" y="623.50"></text></g><g><title>ethparser`tokio::runtime::park::Inner::park (5 samples, 0.01%)</title><rect x="49.5985%" y="629" width="0.0148%" height="15" fill="rgb(253,215,39)" fg:x="16800" fg:w="5"/><text x="49.8485%" y="639.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.01%)</title><rect x="49.6132%" y="629" width="0.0118%" height="15" fill="rgb(221,220,41)" fg:x="16805" fg:w="4"/><text x="49.8632%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.02%)</title><rect x="49.6251%" y="629" width="0.0236%" height="15" fill="rgb(218,133,21)" fg:x="16809" fg:w="8"/><text x="49.8751%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (23 samples, 0.07%)</title><rect x="49.6487%" y="629" width="0.0679%" height="15" fill="rgb(221,193,43)" fg:x="16817" fg:w="23"/><text x="49.8987%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (6 samples, 0.02%)</title><rect x="49.7166%" y="629" width="0.0177%" height="15" fill="rgb(240,128,52)" fg:x="16840" fg:w="6"/><text x="49.9666%" y="639.50"></text></g><g><title>dyld`start (16,855 samples, 49.76%)</title><rect x="0.0000%" y="741" width="49.7609%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="16855"/><text x="0.2500%" y="751.50">dyld`start</text></g><g><title>ethparser`main (16,855 samples, 49.76%)</title><rect x="0.0000%" y="725" width="49.7609%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="16855"/><text x="0.2500%" y="735.50">ethparser`main</text></g><g><title>ethparser`std::rt::lang_start_internal (16,855 samples, 49.76%)</title><rect x="0.0000%" y="709" width="49.7609%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="16855"/><text x="0.2500%" y="719.50">ethparser`std::rt::lang_start_internal</text></g><g><title>ethparser`std::rt::lang_start::_{{closure}} (16,855 samples, 49.76%)</title><rect x="0.0000%" y="693" width="49.7609%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="16855"/><text x="0.2500%" y="703.50">ethparser`std::rt::lang_start::_{{closure}}</text></g><g><title>ethparser`std::sys_common::backtrace::__rust_begin_short_backtrace (16,855 samples, 49.76%)</title><rect x="0.0000%" y="677" width="49.7609%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="16855"/><text x="0.2500%" y="687.50">ethparser`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ethparser`ethparser::main (16,855 samples, 49.76%)</title><rect x="0.0000%" y="661" width="49.7609%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="16855"/><text x="0.2500%" y="671.50">ethparser`ethparser::main</text></g><g><title>ethparser`tokio::runtime::runtime::Runtime::block_on (16,855 samples, 49.76%)</title><rect x="0.0000%" y="645" width="49.7609%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="16855"/><text x="0.2500%" y="655.50">ethparser`tokio::runtime::runtime::Runtime::block_on</text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (9 samples, 0.03%)</title><rect x="49.7343%" y="629" width="0.0266%" height="15" fill="rgb(210,195,18)" fg:x="16846" fg:w="9"/><text x="49.9843%" y="639.50"></text></g><g><title>ethparser`__floattidf (14 samples, 0.04%)</title><rect x="49.7815%" y="581" width="0.0413%" height="15" fill="rgb(249,80,12)" fg:x="16862" fg:w="14"/><text x="50.0315%" y="591.50"></text></g><g><title>ethparser`std::time::Instant::now (8 samples, 0.02%)</title><rect x="49.8288%" y="581" width="0.0236%" height="15" fill="rgb(221,65,9)" fg:x="16878" fg:w="8"/><text x="50.0788%" y="591.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (6 samples, 0.02%)</title><rect x="49.8553%" y="581" width="0.0177%" height="15" fill="rgb(235,49,36)" fg:x="16887" fg:w="6"/><text x="50.1053%" y="591.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (6 samples, 0.02%)</title><rect x="49.8731%" y="581" width="0.0177%" height="15" fill="rgb(225,32,20)" fg:x="16893" fg:w="6"/><text x="50.1231%" y="591.50"></text></g><g><title>ethparser`&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (4 samples, 0.01%)</title><rect x="50.8237%" y="565" width="0.0118%" height="15" fill="rgb(215,141,46)" fg:x="17215" fg:w="4"/><text x="51.0737%" y="575.50"></text></g><g><title>ethparser`__floattidf (6 samples, 0.02%)</title><rect x="50.8414%" y="565" width="0.0177%" height="15" fill="rgb(250,160,47)" fg:x="17221" fg:w="6"/><text x="51.0914%" y="575.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (4 samples, 0.01%)</title><rect x="50.8916%" y="533" width="0.0118%" height="15" fill="rgb(216,222,40)" fg:x="17238" fg:w="4"/><text x="51.1416%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (22 samples, 0.06%)</title><rect x="50.9565%" y="517" width="0.0650%" height="15" fill="rgb(234,217,39)" fg:x="17260" fg:w="22"/><text x="51.2065%" y="527.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (47 samples, 0.14%)</title><rect x="50.9034%" y="533" width="0.1388%" height="15" fill="rgb(207,178,40)" fg:x="17242" fg:w="47"/><text x="51.1534%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (7 samples, 0.02%)</title><rect x="51.0215%" y="517" width="0.0207%" height="15" fill="rgb(221,136,13)" fg:x="17282" fg:w="7"/><text x="51.2715%" y="527.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (64 samples, 0.19%)</title><rect x="50.8768%" y="549" width="0.1889%" height="15" fill="rgb(249,199,10)" fg:x="17233" fg:w="64"/><text x="51.1268%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (8 samples, 0.02%)</title><rect x="51.0422%" y="533" width="0.0236%" height="15" fill="rgb(249,222,13)" fg:x="17289" fg:w="8"/><text x="51.2922%" y="543.50"></text></g><g><title>ethparser`std::sys::pal::unix::time::Timespec::now (75 samples, 0.22%)</title><rect x="50.8650%" y="565" width="0.2214%" height="15" fill="rgb(244,185,38)" fg:x="17229" fg:w="75"/><text x="51.1150%" y="575.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (7 samples, 0.02%)</title><rect x="51.0658%" y="549" width="0.0207%" height="15" fill="rgb(236,202,9)" fg:x="17297" fg:w="7"/><text x="51.3158%" y="559.50"></text></g><g><title>ethparser`std::sys::pal::unix::time::Timespec::sub_timespec (5 samples, 0.01%)</title><rect x="51.0864%" y="565" width="0.0148%" height="15" fill="rgb(250,229,37)" fg:x="17304" fg:w="5"/><text x="51.3364%" y="575.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (48 samples, 0.14%)</title><rect x="51.1160%" y="565" width="0.1417%" height="15" fill="rgb(206,174,23)" fg:x="17314" fg:w="48"/><text x="51.3660%" y="575.50"></text></g><g><title>ethparser`DYLD-STUB$$pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="51.5972%" y="533" width="0.0118%" height="15" fill="rgb(211,33,43)" fg:x="17477" fg:w="4"/><text x="51.8472%" y="543.50"></text></g><g><title>ethparser`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (11 samples, 0.03%)</title><rect x="51.6090%" y="533" width="0.0325%" height="15" fill="rgb(245,58,50)" fg:x="17481" fg:w="11"/><text x="51.8590%" y="543.50"></text></g><g><title> 32]&gt; (11 samples, 0.03%)</title><rect x="51.6090%" y="517" width="0.0325%" height="15" fill="rgb(244,68,36)" fg:x="17481" fg:w="11"/><text x="51.8590%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (423 samples, 1.25%)</title><rect x="51.7300%" y="517" width="1.2488%" height="15" fill="rgb(232,229,15)" fg:x="17522" fg:w="423"/><text x="51.9800%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (8 samples, 0.02%)</title><rect x="53.0556%" y="501" width="0.0236%" height="15" fill="rgb(254,30,23)" fg:x="17971" fg:w="8"/><text x="53.3056%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (8 samples, 0.02%)</title><rect x="53.0556%" y="485" width="0.0236%" height="15" fill="rgb(235,160,14)" fg:x="17971" fg:w="8"/><text x="53.3056%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.02%)</title><rect x="53.0792%" y="501" width="0.0207%" height="15" fill="rgb(212,155,44)" fg:x="17979" fg:w="7"/><text x="53.3292%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (46 samples, 0.14%)</title><rect x="52.9789%" y="517" width="0.1358%" height="15" fill="rgb(226,2,50)" fg:x="17945" fg:w="46"/><text x="53.2289%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (5 samples, 0.01%)</title><rect x="53.0999%" y="501" width="0.0148%" height="15" fill="rgb(234,177,6)" fg:x="17986" fg:w="5"/><text x="53.3499%" y="511.50"></text></g><g><title>ethparser`parking_lot::condvar::Condvar::wait_until_internal (504 samples, 1.49%)</title><rect x="51.6415%" y="533" width="1.4880%" height="15" fill="rgb(217,24,9)" fg:x="17492" fg:w="504"/><text x="51.8915%" y="543.50"></text></g><g><title>ethparser`std::sys::pal::unix::time::Timespec::now (4 samples, 0.01%)</title><rect x="53.1294%" y="533" width="0.0118%" height="15" fill="rgb(220,13,46)" fg:x="17996" fg:w="4"/><text x="53.3794%" y="543.50"></text></g><g><title>ethparser`std::time::Instant::now (12 samples, 0.04%)</title><rect x="53.1412%" y="533" width="0.0354%" height="15" fill="rgb(239,221,27)" fg:x="18000" fg:w="12"/><text x="53.3912%" y="543.50"></text></g><g><title>ethparser`tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (6 samples, 0.02%)</title><rect x="53.1767%" y="533" width="0.0177%" height="15" fill="rgb(222,198,25)" fg:x="18012" fg:w="6"/><text x="53.4267%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::driver::Driver::park (4 samples, 0.01%)</title><rect x="53.1944%" y="533" width="0.0118%" height="15" fill="rgb(211,99,13)" fg:x="18018" fg:w="4"/><text x="53.4444%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::signal::Driver::process (18 samples, 0.05%)</title><rect x="53.2150%" y="533" width="0.0531%" height="15" fill="rgb(232,111,31)" fg:x="18025" fg:w="18"/><text x="53.4650%" y="543.50"></text></g><g><title>ethparser`&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.01%)</title><rect x="53.3892%" y="517" width="0.0148%" height="15" fill="rgb(245,82,37)" fg:x="18084" fg:w="5"/><text x="53.6392%" y="527.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_absolute_time (6 samples, 0.02%)</title><rect x="53.4365%" y="485" width="0.0177%" height="15" fill="rgb(227,149,46)" fg:x="18100" fg:w="6"/><text x="53.6865%" y="495.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$mach_timebase_info (8 samples, 0.02%)</title><rect x="53.4542%" y="485" width="0.0236%" height="15" fill="rgb(218,36,50)" fg:x="18106" fg:w="8"/><text x="53.7042%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (25 samples, 0.07%)</title><rect x="53.5044%" y="469" width="0.0738%" height="15" fill="rgb(226,80,48)" fg:x="18123" fg:w="25"/><text x="53.7544%" y="479.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (50 samples, 0.15%)</title><rect x="53.4778%" y="485" width="0.1476%" height="15" fill="rgb(238,224,15)" fg:x="18114" fg:w="50"/><text x="53.7278%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (16 samples, 0.05%)</title><rect x="53.5782%" y="469" width="0.0472%" height="15" fill="rgb(241,136,10)" fg:x="18148" fg:w="16"/><text x="53.8282%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (5 samples, 0.01%)</title><rect x="53.6254%" y="485" width="0.0148%" height="15" fill="rgb(208,32,45)" fg:x="18164" fg:w="5"/><text x="53.8754%" y="495.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (86 samples, 0.25%)</title><rect x="53.4276%" y="501" width="0.2539%" height="15" fill="rgb(207,135,9)" fg:x="18097" fg:w="86"/><text x="53.6776%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`mach_timebase_info (14 samples, 0.04%)</title><rect x="53.6402%" y="485" width="0.0413%" height="15" fill="rgb(206,86,44)" fg:x="18169" fg:w="14"/><text x="53.8902%" y="495.50"></text></g><g><title>ethparser`std::sys::pal::unix::time::Timespec::now (93 samples, 0.27%)</title><rect x="53.4188%" y="517" width="0.2746%" height="15" fill="rgb(245,177,15)" fg:x="18094" fg:w="93"/><text x="53.6688%" y="527.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (4 samples, 0.01%)</title><rect x="53.6815%" y="501" width="0.0118%" height="15" fill="rgb(206,64,50)" fg:x="18183" fg:w="4"/><text x="53.9315%" y="511.50"></text></g><g><title>ethparser`std::time::Instant::checked_duration_since (5 samples, 0.01%)</title><rect x="53.6963%" y="517" width="0.0148%" height="15" fill="rgb(234,36,40)" fg:x="18188" fg:w="5"/><text x="53.9463%" y="527.50"></text></g><g><title>ethparser`std::sys::pal::unix::time::Timespec::sub_timespec (5 samples, 0.01%)</title><rect x="53.6963%" y="501" width="0.0148%" height="15" fill="rgb(213,64,8)" fg:x="18188" fg:w="5"/><text x="53.9463%" y="511.50"></text></g><g><title>ethparser`tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (26 samples, 0.08%)</title><rect x="53.7110%" y="517" width="0.0768%" height="15" fill="rgb(210,75,36)" fg:x="18193" fg:w="26"/><text x="53.9610%" y="527.50"></text></g><g><title>ethparser`mio::poll::Poll::poll (102 samples, 0.30%)</title><rect x="53.9649%" y="501" width="0.3011%" height="15" fill="rgb(229,88,21)" fg:x="18279" fg:w="102"/><text x="54.2149%" y="511.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (7 samples, 0.02%)</title><rect x="55.1724%" y="485" width="0.0207%" height="15" fill="rgb(252,204,47)" fg:x="18688" fg:w="7"/><text x="55.4224%" y="495.50"></text></g><g><title>ethparser`tokio::runtime::task::raw::schedule (22 samples, 0.06%)</title><rect x="55.1931%" y="485" width="0.0650%" height="15" fill="rgb(208,77,27)" fg:x="18695" fg:w="22"/><text x="55.4431%" y="495.50"></text></g><g><title>ethparser`tokio::runtime::task::state::State::transition_to_notified_by_val (9 samples, 0.03%)</title><rect x="55.2580%" y="485" width="0.0266%" height="15" fill="rgb(221,76,26)" fg:x="18717" fg:w="9"/><text x="55.5080%" y="495.50"></text></g><g><title>ethparser`tokio::runtime::context::with_scheduler (7 samples, 0.02%)</title><rect x="55.3082%" y="469" width="0.0207%" height="15" fill="rgb(225,139,18)" fg:x="18734" fg:w="7"/><text x="55.5582%" y="479.50"></text></g><g><title>ethparser`tokio::runtime::context::with_scheduler (60 samples, 0.18%)</title><rect x="55.3318%" y="453" width="0.1771%" height="15" fill="rgb(230,137,11)" fg:x="18742" fg:w="60"/><text x="55.5818%" y="463.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (17 samples, 0.05%)</title><rect x="55.4588%" y="437" width="0.0502%" height="15" fill="rgb(212,28,1)" fg:x="18785" fg:w="17"/><text x="55.7088%" y="447.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (98 samples, 0.29%)</title><rect x="55.3289%" y="469" width="0.2893%" height="15" fill="rgb(248,164,17)" fg:x="18741" fg:w="98"/><text x="55.5789%" y="479.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (34 samples, 0.10%)</title><rect x="55.5178%" y="453" width="0.1004%" height="15" fill="rgb(222,171,42)" fg:x="18805" fg:w="34"/><text x="55.7678%" y="463.50"></text></g><g><title>ethparser`tokio::runtime::io::scheduled_io::ScheduledIo::wake (474 samples, 1.40%)</title><rect x="54.2661%" y="501" width="1.3994%" height="15" fill="rgb(243,84,45)" fg:x="18381" fg:w="474"/><text x="54.5161%" y="511.50"></text></g><g><title>ethparser`tokio::runtime::task::waker::wake_by_val (129 samples, 0.38%)</title><rect x="55.2846%" y="485" width="0.3808%" height="15" fill="rgb(252,49,23)" fg:x="18726" fg:w="129"/><text x="55.5346%" y="495.50"></text></g><g><title>ethparser`tokio::runtime::task::state::State::transition_to_notified_by_val (15 samples, 0.04%)</title><rect x="55.6212%" y="469" width="0.0443%" height="15" fill="rgb(215,19,7)" fg:x="18840" fg:w="15"/><text x="55.8712%" y="479.50"></text></g><g><title>ethparser`tokio::runtime::task::waker::wake_by_val (17 samples, 0.05%)</title><rect x="55.6654%" y="501" width="0.0502%" height="15" fill="rgb(238,81,41)" fg:x="18855" fg:w="17"/><text x="55.9154%" y="511.50"></text></g><g><title>ethparser`tokio::runtime::io::driver::Driver::turn (2,540 samples, 7.50%)</title><rect x="53.7878%" y="517" width="7.4988%" height="15" fill="rgb(210,199,37)" fg:x="18219" fg:w="2540"/><text x="54.0378%" y="527.50">ethparser`..</text></g><g><title>libsystem_kernel.dylib`kevent (1,887 samples, 5.57%)</title><rect x="55.7156%" y="501" width="5.5710%" height="15" fill="rgb(244,192,49)" fg:x="18872" fg:w="1887"/><text x="55.9656%" y="511.50">libsyst..</text></g><g><title>ethparser`tokio::runtime::signal::Driver::process (10 samples, 0.03%)</title><rect x="61.2866%" y="517" width="0.0295%" height="15" fill="rgb(226,211,11)" fg:x="20759" fg:w="10"/><text x="61.5366%" y="527.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::Wheel::next_expiration (27 samples, 0.08%)</title><rect x="61.3161%" y="517" width="0.0797%" height="15" fill="rgb(236,162,54)" fg:x="20769" fg:w="27"/><text x="61.5661%" y="527.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::level::Level::next_expiration (19 samples, 0.06%)</title><rect x="61.3397%" y="501" width="0.0561%" height="15" fill="rgb(220,229,9)" fg:x="20777" fg:w="19"/><text x="61.5897%" y="511.50"></text></g><g><title>ethparser`tokio::runtime::time::Driver::park_internal (2,774 samples, 8.19%)</title><rect x="53.2682%" y="533" width="8.1897%" height="15" fill="rgb(250,87,22)" fg:x="18043" fg:w="2774"/><text x="53.5182%" y="543.50">ethparser`t..</text></g><g><title>libsystem_c.dylib`clock_gettime (18 samples, 0.05%)</title><rect x="61.4047%" y="517" width="0.0531%" height="15" fill="rgb(239,43,17)" fg:x="20799" fg:w="18"/><text x="61.6547%" y="527.50"></text></g><g><title>ethparser`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (62 samples, 0.18%)</title><rect x="61.5582%" y="517" width="0.1830%" height="15" fill="rgb(231,177,25)" fg:x="20851" fg:w="62"/><text x="61.8082%" y="527.50"></text></g><g><title> 32]&gt; (62 samples, 0.18%)</title><rect x="61.5582%" y="501" width="0.1830%" height="15" fill="rgb(219,179,1)" fg:x="20851" fg:w="62"/><text x="61.8082%" y="511.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::Wheel::next_expiration (15 samples, 0.04%)</title><rect x="61.7413%" y="517" width="0.0443%" height="15" fill="rgb(238,219,53)" fg:x="20913" fg:w="15"/><text x="61.9913%" y="527.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::Wheel::next_expiration (41 samples, 0.12%)</title><rect x="61.8062%" y="501" width="0.1210%" height="15" fill="rgb(232,167,36)" fg:x="20935" fg:w="41"/><text x="62.0562%" y="511.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::level::Level::next_expiration (35 samples, 0.10%)</title><rect x="61.8239%" y="485" width="0.1033%" height="15" fill="rgb(244,19,51)" fg:x="20941" fg:w="35"/><text x="62.0739%" y="495.50"></text></g><g><title>ethparser`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (165 samples, 0.49%)</title><rect x="61.4578%" y="533" width="0.4871%" height="15" fill="rgb(224,6,22)" fg:x="20817" fg:w="165"/><text x="61.7078%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::Wheel::poll (54 samples, 0.16%)</title><rect x="61.7855%" y="517" width="0.1594%" height="15" fill="rgb(224,145,5)" fg:x="20928" fg:w="54"/><text x="62.0355%" y="527.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::level::Level::next_expiration (6 samples, 0.02%)</title><rect x="61.9273%" y="501" width="0.0177%" height="15" fill="rgb(234,130,49)" fg:x="20976" fg:w="6"/><text x="62.1773%" y="511.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::Wheel::next_expiration (5 samples, 0.01%)</title><rect x="61.9450%" y="533" width="0.0148%" height="15" fill="rgb(254,6,2)" fg:x="20982" fg:w="5"/><text x="62.1950%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::time::wheel::Wheel::poll (7 samples, 0.02%)</title><rect x="61.9597%" y="533" width="0.0207%" height="15" fill="rgb(208,96,46)" fg:x="20987" fg:w="7"/><text x="62.2097%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (4 samples, 0.01%)</title><rect x="61.9863%" y="533" width="0.0118%" height="15" fill="rgb(239,3,39)" fg:x="20996" fg:w="4"/><text x="62.2363%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::park::Parker::park (3,598 samples, 10.62%)</title><rect x="51.3994%" y="549" width="10.6223%" height="15" fill="rgb(233,210,1)" fg:x="17410" fg:w="3598"/><text x="51.6494%" y="559.50">ethparser`tokio:..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="62.0099%" y="533" width="0.0118%" height="15" fill="rgb(244,137,37)" fg:x="21004" fg:w="4"/><text x="62.2599%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::time::Driver::park_internal (52 samples, 0.15%)</title><rect x="62.0217%" y="549" width="0.1535%" height="15" fill="rgb(240,136,2)" fg:x="21008" fg:w="52"/><text x="62.2717%" y="559.50"></text></g><g><title>ethparser`tokio::runtime::io::driver::Driver::turn (46 samples, 0.14%)</title><rect x="62.0394%" y="533" width="0.1358%" height="15" fill="rgb(239,18,37)" fg:x="21014" fg:w="46"/><text x="62.2894%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`kevent (45 samples, 0.13%)</title><rect x="62.0424%" y="517" width="0.1329%" height="15" fill="rgb(218,185,22)" fg:x="21015" fg:w="45"/><text x="62.2924%" y="527.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3,704 samples, 10.94%)</title><rect x="51.2577%" y="565" width="10.9353%" height="15" fill="rgb(225,218,4)" fg:x="17362" fg:w="3704"/><text x="51.5077%" y="575.50">ethparser`tokio:..</text></g><g><title>ethparser`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (6 samples, 0.02%)</title><rect x="62.1752%" y="549" width="0.0177%" height="15" fill="rgb(230,182,32)" fg:x="21060" fg:w="6"/><text x="62.4252%" y="559.50"></text></g><g><title>ethparser`parking_lot_core::parking_lot::lock_bucket_pair (7 samples, 0.02%)</title><rect x="62.3701%" y="533" width="0.0207%" height="15" fill="rgb(242,56,43)" fg:x="21126" fg:w="7"/><text x="62.6201%" y="543.50"></text></g><g><title>ethparser`std::sys::pal::unix::time::Timespec::now (4 samples, 0.01%)</title><rect x="62.3908%" y="533" width="0.0118%" height="15" fill="rgb(233,99,24)" fg:x="21133" fg:w="4"/><text x="62.6408%" y="543.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.01%)</title><rect x="62.3908%" y="517" width="0.0118%" height="15" fill="rgb(234,209,42)" fg:x="21133" fg:w="4"/><text x="62.6408%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (148 samples, 0.44%)</title><rect x="62.4026%" y="533" width="0.4369%" height="15" fill="rgb(227,7,12)" fg:x="21137" fg:w="148"/><text x="62.6526%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (8 samples, 0.02%)</title><rect x="62.8454%" y="533" width="0.0236%" height="15" fill="rgb(245,203,43)" fg:x="21287" fg:w="8"/><text x="63.0954%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.02%)</title><rect x="62.8690%" y="533" width="0.0207%" height="15" fill="rgb(238,205,33)" fg:x="21295" fg:w="7"/><text x="63.1190%" y="543.50"></text></g><g><title>ethparser`parking_lot::condvar::Condvar::notify_one_slow (194 samples, 0.57%)</title><rect x="62.3199%" y="549" width="0.5727%" height="15" fill="rgb(231,56,7)" fg:x="21109" fg:w="194"/><text x="62.5699%" y="559.50"></text></g><g><title>ethparser`std::panicking::try (10 samples, 0.03%)</title><rect x="62.8986%" y="549" width="0.0295%" height="15" fill="rgb(244,186,29)" fg:x="21305" fg:w="10"/><text x="63.1486%" y="559.50"></text></g><g><title>ethparser`tokio::runtime::driver::Handle::unpark (17 samples, 0.05%)</title><rect x="62.9281%" y="549" width="0.0502%" height="15" fill="rgb(234,111,31)" fg:x="21315" fg:w="17"/><text x="63.1781%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`kevent (17 samples, 0.05%)</title><rect x="62.9281%" y="533" width="0.0502%" height="15" fill="rgb(241,149,10)" fg:x="21315" fg:w="17"/><text x="63.1781%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (12 samples, 0.04%)</title><rect x="62.9783%" y="549" width="0.0354%" height="15" fill="rgb(249,206,44)" fg:x="21332" fg:w="12"/><text x="63.2283%" y="559.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (11 samples, 0.03%)</title><rect x="63.0137%" y="549" width="0.0325%" height="15" fill="rgb(251,153,30)" fg:x="21344" fg:w="11"/><text x="63.2637%" y="559.50"></text></g><g><title>ethparser`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (28 samples, 0.08%)</title><rect x="63.0993%" y="533" width="0.0827%" height="15" fill="rgb(239,152,38)" fg:x="21373" fg:w="28"/><text x="63.3493%" y="543.50"></text></g><g><title>ethparser`&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (9 samples, 0.03%)</title><rect x="63.1820%" y="533" width="0.0266%" height="15" fill="rgb(249,139,47)" fg:x="21401" fg:w="9"/><text x="63.4320%" y="543.50"></text></g><g><title>ethparser`hyper::body::incoming::Sender::poll_ready (11 samples, 0.03%)</title><rect x="63.3591%" y="469" width="0.0325%" height="15" fill="rgb(244,64,35)" fg:x="21461" fg:w="11"/><text x="63.6091%" y="479.50"></text></g><g><title>ethparser`hyper::body::incoming::Sender::try_send_data (4 samples, 0.01%)</title><rect x="63.3916%" y="469" width="0.0118%" height="15" fill="rgb(216,46,15)" fg:x="21472" fg:w="4"/><text x="63.6416%" y="479.50"></text></g><g><title>ethparser`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (14 samples, 0.04%)</title><rect x="63.4034%" y="469" width="0.0413%" height="15" fill="rgb(250,74,19)" fg:x="21476" fg:w="14"/><text x="63.6534%" y="479.50"></text></g><g><title>ethparser`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (9 samples, 0.03%)</title><rect x="63.4447%" y="469" width="0.0266%" height="15" fill="rgb(249,42,33)" fg:x="21490" fg:w="9"/><text x="63.6947%" y="479.50"></text></g><g><title>ethparser`hyper::proto::h1::conn::State::try_keep_alive (23 samples, 0.07%)</title><rect x="63.4713%" y="469" width="0.0679%" height="15" fill="rgb(242,149,17)" fg:x="21499" fg:w="23"/><text x="63.7213%" y="479.50"></text></g><g><title>ethparser`&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.01%)</title><rect x="63.8521%" y="453" width="0.0118%" height="15" fill="rgb(244,29,21)" fg:x="21628" fg:w="4"/><text x="64.1021%" y="463.50"></text></g><g><title>ethparser`&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as hyper::rt::io::Write&gt;::poll_flush (9 samples, 0.03%)</title><rect x="63.8669%" y="453" width="0.0266%" height="15" fill="rgb(220,130,37)" fg:x="21633" fg:w="9"/><text x="64.1169%" y="463.50"></text></g><g><title>ethparser`futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (7 samples, 0.02%)</title><rect x="63.8935%" y="453" width="0.0207%" height="15" fill="rgb(211,67,2)" fg:x="21642" fg:w="7"/><text x="64.1435%" y="463.50"></text></g><g><title>ethparser`futures_channel::mpsc::Sender&lt;T&gt;::try_send (6 samples, 0.02%)</title><rect x="63.9141%" y="453" width="0.0177%" height="15" fill="rgb(235,68,52)" fg:x="21649" fg:w="6"/><text x="64.1641%" y="463.50"></text></g><g><title>ethparser`futures_core::task::__internal::atomic_waker::AtomicWaker::register (6 samples, 0.02%)</title><rect x="63.9319%" y="453" width="0.0177%" height="15" fill="rgb(246,142,3)" fg:x="21655" fg:w="6"/><text x="64.1819%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (7 samples, 0.02%)</title><rect x="64.0175%" y="405" width="0.0207%" height="15" fill="rgb(241,25,7)" fg:x="21684" fg:w="7"/><text x="64.2675%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (8 samples, 0.02%)</title><rect x="64.0175%" y="421" width="0.0236%" height="15" fill="rgb(242,119,39)" fg:x="21684" fg:w="8"/><text x="64.2675%" y="431.50"></text></g><g><title>ethparser`futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (19 samples, 0.06%)</title><rect x="63.9939%" y="437" width="0.0561%" height="15" fill="rgb(241,98,45)" fg:x="21676" fg:w="19"/><text x="64.2439%" y="447.50"></text></g><g><title>ethparser`futures_core::task::__internal::atomic_waker::AtomicWaker::register (48 samples, 0.14%)</title><rect x="64.0500%" y="437" width="0.1417%" height="15" fill="rgb(254,28,30)" fg:x="21695" fg:w="48"/><text x="64.3000%" y="447.50"></text></g><g><title>ethparser`hyper::body::incoming::Sender::poll_ready (83 samples, 0.25%)</title><rect x="63.9555%" y="453" width="0.2450%" height="15" fill="rgb(241,142,54)" fg:x="21663" fg:w="83"/><text x="64.2055%" y="463.50"></text></g><g><title>ethparser`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (4 samples, 0.01%)</title><rect x="64.2655%" y="421" width="0.0118%" height="15" fill="rgb(222,85,15)" fg:x="21768" fg:w="4"/><text x="64.5155%" y="431.50"></text></g><g><title>ethparser`parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.01%)</title><rect x="64.2773%" y="421" width="0.0148%" height="15" fill="rgb(210,85,47)" fg:x="21772" fg:w="5"/><text x="64.5273%" y="431.50"></text></g><g><title>ethparser`parking_lot_core::parking_lot::lock_bucket_pair (12 samples, 0.04%)</title><rect x="64.3511%" y="389" width="0.0354%" height="15" fill="rgb(224,206,25)" fg:x="21797" fg:w="12"/><text x="64.6011%" y="399.50"></text></g><g><title>ethparser`std::sys::pal::unix::time::Timespec::now (5 samples, 0.01%)</title><rect x="64.3865%" y="389" width="0.0148%" height="15" fill="rgb(243,201,19)" fg:x="21809" fg:w="5"/><text x="64.6365%" y="399.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.01%)</title><rect x="64.3895%" y="373" width="0.0118%" height="15" fill="rgb(236,59,4)" fg:x="21810" fg:w="4"/><text x="64.6395%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (249 samples, 0.74%)</title><rect x="64.4013%" y="389" width="0.7351%" height="15" fill="rgb(254,179,45)" fg:x="21814" fg:w="249"/><text x="64.6513%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (11 samples, 0.03%)</title><rect x="65.1512%" y="389" width="0.0325%" height="15" fill="rgb(226,14,10)" fg:x="22068" fg:w="11"/><text x="65.4012%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (6 samples, 0.02%)</title><rect x="65.1659%" y="373" width="0.0177%" height="15" fill="rgb(244,27,41)" fg:x="22073" fg:w="6"/><text x="65.4159%" y="383.50"></text></g><g><title>ethparser`parking_lot::condvar::Condvar::notify_one_slow (297 samples, 0.88%)</title><rect x="64.3127%" y="405" width="0.8768%" height="15" fill="rgb(235,35,32)" fg:x="21784" fg:w="297"/><text x="64.5627%" y="415.50"></text></g><g><title>ethparser`parking_lot_core::parking_lot::lock_bucket_pair (4 samples, 0.01%)</title><rect x="65.1895%" y="405" width="0.0118%" height="15" fill="rgb(218,68,31)" fg:x="22081" fg:w="4"/><text x="65.4395%" y="415.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (6 samples, 0.02%)</title><rect x="65.2013%" y="405" width="0.0177%" height="15" fill="rgb(207,120,37)" fg:x="22085" fg:w="6"/><text x="65.4513%" y="415.50"></text></g><g><title>ethparser`tokio::runtime::park::wake (317 samples, 0.94%)</title><rect x="64.2920%" y="421" width="0.9359%" height="15" fill="rgb(227,98,0)" fg:x="21777" fg:w="317"/><text x="64.5420%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (30 samples, 0.09%)</title><rect x="65.2279%" y="421" width="0.0886%" height="15" fill="rgb(207,7,3)" fg:x="22094" fg:w="30"/><text x="65.4779%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.09%)</title><rect x="65.2309%" y="405" width="0.0856%" height="15" fill="rgb(206,98,19)" fg:x="22095" fg:w="29"/><text x="65.4809%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (28 samples, 0.08%)</title><rect x="65.2338%" y="389" width="0.0827%" height="15" fill="rgb(217,5,26)" fg:x="22096" fg:w="28"/><text x="65.4838%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (23 samples, 0.07%)</title><rect x="65.2486%" y="373" width="0.0679%" height="15" fill="rgb(235,190,38)" fg:x="22101" fg:w="23"/><text x="65.4986%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (6 samples, 0.02%)</title><rect x="65.3165%" y="421" width="0.0177%" height="15" fill="rgb(247,86,24)" fg:x="22124" fg:w="6"/><text x="65.5665%" y="431.50"></text></g><g><title>ethparser`futures_channel::mpsc::Sender&lt;T&gt;::try_send (381 samples, 1.12%)</title><rect x="64.2123%" y="437" width="1.1248%" height="15" fill="rgb(205,101,16)" fg:x="21750" fg:w="381"/><text x="64.4623%" y="447.50"></text></g><g><title>ethparser`tokio::runtime::park::wake (6 samples, 0.02%)</title><rect x="65.3372%" y="437" width="0.0177%" height="15" fill="rgb(246,168,33)" fg:x="22131" fg:w="6"/><text x="65.5872%" y="447.50"></text></g><g><title>ethparser`hyper::body::incoming::Sender::try_send_data (395 samples, 1.17%)</title><rect x="64.2005%" y="453" width="1.1662%" height="15" fill="rgb(231,114,1)" fg:x="21746" fg:w="395"/><text x="64.4505%" y="463.50"></text></g><g><title>ethparser`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (20 samples, 0.06%)</title><rect x="65.4257%" y="437" width="0.0590%" height="15" fill="rgb(207,184,53)" fg:x="22161" fg:w="20"/><text x="65.6757%" y="447.50"></text></g><g><title>ethparser`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (12 samples, 0.04%)</title><rect x="65.6029%" y="405" width="0.0354%" height="15" fill="rgb(224,95,51)" fg:x="22221" fg:w="12"/><text x="65.8529%" y="415.50"></text></g><g><title>ethparser`&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (6 samples, 0.02%)</title><rect x="65.6383%" y="405" width="0.0177%" height="15" fill="rgb(212,188,45)" fg:x="22233" fg:w="6"/><text x="65.8883%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (32 samples, 0.09%)</title><rect x="65.6737%" y="389" width="0.0945%" height="15" fill="rgb(223,154,38)" fg:x="22245" fg:w="32"/><text x="65.9237%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (29 samples, 0.09%)</title><rect x="65.6826%" y="373" width="0.0856%" height="15" fill="rgb(251,22,52)" fg:x="22248" fg:w="29"/><text x="65.9326%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (29 samples, 0.09%)</title><rect x="65.6826%" y="357" width="0.0856%" height="15" fill="rgb(229,209,22)" fg:x="22248" fg:w="29"/><text x="65.9326%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (24 samples, 0.07%)</title><rect x="65.6973%" y="341" width="0.0709%" height="15" fill="rgb(234,138,34)" fg:x="22253" fg:w="24"/><text x="65.9473%" y="351.50"></text></g><g><title>ethparser`bytes::bytes_mut::BytesMut::split_to (37 samples, 0.11%)</title><rect x="65.6619%" y="405" width="0.1092%" height="15" fill="rgb(212,95,11)" fg:x="22241" fg:w="37"/><text x="65.9119%" y="415.50"></text></g><g><title>Security`SSLGetConnection (21 samples, 0.06%)</title><rect x="65.8656%" y="373" width="0.0620%" height="15" fill="rgb(240,179,47)" fg:x="22310" fg:w="21"/><text x="66.1156%" y="383.50"></text></g><g><title>Security`SSLGetBufferedReadSize (18 samples, 0.05%)</title><rect x="66.0250%" y="357" width="0.0531%" height="15" fill="rgb(240,163,11)" fg:x="22364" fg:w="18"/><text x="66.2750%" y="367.50"></text></g><g><title>Security`SSLGetConnection (11 samples, 0.03%)</title><rect x="66.0782%" y="357" width="0.0325%" height="15" fill="rgb(236,37,12)" fg:x="22382" fg:w="11"/><text x="66.3282%" y="367.50"></text></g><g><title>Security`SSLRead (16 samples, 0.05%)</title><rect x="66.1107%" y="357" width="0.0472%" height="15" fill="rgb(232,164,16)" fg:x="22393" fg:w="16"/><text x="66.3607%" y="367.50"></text></g><g><title>Security`DYLD-STUB$$tls_handshake_continue (6 samples, 0.02%)</title><rect x="66.2110%" y="341" width="0.0177%" height="15" fill="rgb(244,205,15)" fg:x="22427" fg:w="6"/><text x="66.4610%" y="351.50"></text></g><g><title>Security`SSLGetBufferedReadSize (11 samples, 0.03%)</title><rect x="66.2287%" y="341" width="0.0325%" height="15" fill="rgb(223,117,47)" fg:x="22433" fg:w="11"/><text x="66.4787%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`small_size (12 samples, 0.04%)</title><rect x="66.4265%" y="293" width="0.0354%" height="15" fill="rgb(244,107,35)" fg:x="22500" fg:w="12"/><text x="66.6765%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.08%)</title><rect x="66.4059%" y="309" width="0.0797%" height="15" fill="rgb(205,140,8)" fg:x="22493" fg:w="27"/><text x="66.6559%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (8 samples, 0.02%)</title><rect x="66.4620%" y="293" width="0.0236%" height="15" fill="rgb(228,84,46)" fg:x="22512" fg:w="8"/><text x="66.7120%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.01%)</title><rect x="66.4708%" y="277" width="0.0148%" height="15" fill="rgb(254,188,9)" fg:x="22515" fg:w="5"/><text x="66.7208%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.03%)</title><rect x="66.4856%" y="309" width="0.0266%" height="15" fill="rgb(206,112,54)" fg:x="22520" fg:w="9"/><text x="66.7356%" y="319.50"></text></g><g><title>Security`SSLRecordFreeInternal (40 samples, 0.12%)</title><rect x="66.4059%" y="325" width="0.1181%" height="15" fill="rgb(216,84,49)" fg:x="22493" fg:w="40"/><text x="66.6559%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.01%)</title><rect x="66.5122%" y="309" width="0.0118%" height="15" fill="rgb(214,194,35)" fg:x="22529" fg:w="4"/><text x="66.7622%" y="319.50"></text></g><g><title>ethparser`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (9 samples, 0.03%)</title><rect x="66.7129%" y="293" width="0.0266%" height="15" fill="rgb(249,28,3)" fg:x="22597" fg:w="9"/><text x="66.9629%" y="303.50"></text></g><g><title>ethparser`security_framework::secure_transport::translate_err (12 samples, 0.04%)</title><rect x="66.7395%" y="293" width="0.0354%" height="15" fill="rgb(222,56,52)" fg:x="22606" fg:w="12"/><text x="66.9895%" y="303.50"></text></g><g><title>ethparser`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (32 samples, 0.09%)</title><rect x="67.0406%" y="229" width="0.0945%" height="15" fill="rgb(245,217,50)" fg:x="22708" fg:w="32"/><text x="67.2906%" y="239.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__recvfrom (6 samples, 0.02%)</title><rect x="67.1410%" y="229" width="0.0177%" height="15" fill="rgb(213,201,24)" fg:x="22742" fg:w="6"/><text x="67.3910%" y="239.50"></text></g><g><title>libsystem_c.dylib`recv (28 samples, 0.08%)</title><rect x="67.1587%" y="229" width="0.0827%" height="15" fill="rgb(248,116,28)" fg:x="22748" fg:w="28"/><text x="67.4087%" y="239.50"></text></g><g><title>ethparser`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (8,703 samples, 25.69%)</title><rect x="67.0052%" y="245" width="25.6938%" height="15" fill="rgb(219,72,43)" fg:x="22696" fg:w="8703"/><text x="67.2552%" y="255.50">ethparser`&lt;&amp;mio::net::tcp::stream::TcpStr..</text></g><g><title>libsystem_kernel.dylib`__recvfrom (8,622 samples, 25.45%)</title><rect x="67.2443%" y="229" width="25.4547%" height="15" fill="rgb(209,138,14)" fg:x="22777" fg:w="8622"/><text x="67.4943%" y="239.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>ethparser`&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (8 samples, 0.02%)</title><rect x="92.6990%" y="245" width="0.0236%" height="15" fill="rgb(222,18,33)" fg:x="31399" fg:w="8"/><text x="92.9490%" y="255.50"></text></g><g><title>ethparser`tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (8 samples, 0.02%)</title><rect x="92.8643%" y="229" width="0.0236%" height="15" fill="rgb(213,199,7)" fg:x="31455" fg:w="8"/><text x="93.1143%" y="239.50"></text></g><g><title>ethparser`tokio::runtime::io::registration::Registration::poll_ready (73 samples, 0.22%)</title><rect x="92.7256%" y="245" width="0.2155%" height="15" fill="rgb(250,110,10)" fg:x="31408" fg:w="73"/><text x="92.9756%" y="255.50"></text></g><g><title>ethparser`tokio::runtime::task::waker::clone_waker (18 samples, 0.05%)</title><rect x="92.8879%" y="229" width="0.0531%" height="15" fill="rgb(248,123,6)" fg:x="31463" fg:w="18"/><text x="93.1379%" y="239.50"></text></g><g><title>ethparser`tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (10 samples, 0.03%)</title><rect x="92.9411%" y="245" width="0.0295%" height="15" fill="rgb(206,91,31)" fg:x="31481" fg:w="10"/><text x="93.1911%" y="255.50"></text></g><g><title>ethparser`tokio::net::tcp::stream::TcpStream::poll_read_priv (8,872 samples, 26.19%)</title><rect x="66.8723%" y="261" width="26.1927%" height="15" fill="rgb(211,154,13)" fg:x="22651" fg:w="8872"/><text x="67.1223%" y="271.50">ethparser`tokio::net::tcp::stream::TcpStre..</text></g><g><title>libdyld.dylib`tlv_get_addr (32 samples, 0.09%)</title><rect x="92.9706%" y="245" width="0.0945%" height="15" fill="rgb(225,148,7)" fg:x="31491" fg:w="32"/><text x="93.2206%" y="255.50"></text></g><g><title>ethparser`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (8,900 samples, 26.28%)</title><rect x="66.8162%" y="277" width="26.2754%" height="15" fill="rgb(220,160,43)" fg:x="22632" fg:w="8900"/><text x="67.0662%" y="287.50">ethparser`&lt;hyper_util::rt::tokio::TokioIo&lt;..</text></g><g><title>ethparser`tokio::runtime::io::registration::Registration::poll_ready (9 samples, 0.03%)</title><rect x="93.0651%" y="261" width="0.0266%" height="15" fill="rgb(213,52,39)" fg:x="31523" fg:w="9"/><text x="93.3151%" y="271.50"></text></g><g><title>ethparser`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (9 samples, 0.03%)</title><rect x="93.0916%" y="277" width="0.0266%" height="15" fill="rgb(243,137,7)" fg:x="31532" fg:w="9"/><text x="93.3416%" y="287.50"></text></g><g><title>ethparser`security_framework::secure_transport::read_func (8,975 samples, 26.50%)</title><rect x="66.6391%" y="309" width="26.4968%" height="15" fill="rgb(230,79,13)" fg:x="22572" fg:w="8975"/><text x="66.8891%" y="319.50">ethparser`security_framework::secure_trans..</text></g><g><title>ethparser`std::panicking::try (8,929 samples, 26.36%)</title><rect x="66.7749%" y="293" width="26.3610%" height="15" fill="rgb(247,105,23)" fg:x="22618" fg:w="8929"/><text x="67.0249%" y="303.50">ethparser`std::panicking::try</text></g><g><title>ethparser`tokio::net::tcp::stream::TcpStream::poll_read_priv (6 samples, 0.02%)</title><rect x="93.1182%" y="277" width="0.0177%" height="15" fill="rgb(223,179,41)" fg:x="31541" fg:w="6"/><text x="93.3682%" y="287.50"></text></g><g><title>ethparser`security_framework::secure_transport::translate_err (11 samples, 0.03%)</title><rect x="93.1359%" y="309" width="0.0325%" height="15" fill="rgb(218,9,34)" fg:x="31547" fg:w="11"/><text x="93.3859%" y="319.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_init_with_iv (7 samples, 0.02%)</title><rect x="93.1802%" y="309" width="0.0207%" height="15" fill="rgb(222,106,8)" fg:x="31562" fg:w="7"/><text x="93.4302%" y="319.50"></text></g><g><title>libcorecrypto.dylib`AccelerateCrypto_AES_encrypt_aesni (7 samples, 0.02%)</title><rect x="93.2865%" y="261" width="0.0207%" height="15" fill="rgb(211,220,0)" fg:x="31598" fg:w="7"/><text x="93.5365%" y="271.50"></text></g><g><title>libcorecrypto.dylib`DYLD-STUB$$memset_s (4 samples, 0.01%)</title><rect x="93.3072%" y="261" width="0.0118%" height="15" fill="rgb(229,52,16)" fg:x="31605" fg:w="4"/><text x="93.5572%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="93.3337%" y="229" width="0.0118%" height="15" fill="rgb(212,155,18)" fg:x="31614" fg:w="4"/><text x="93.5837%" y="239.50"></text></g><g><title>libsystem_c.dylib`memset_s (8 samples, 0.02%)</title><rect x="93.3249%" y="245" width="0.0236%" height="15" fill="rgb(242,21,14)" fg:x="31611" fg:w="8"/><text x="93.5749%" y="255.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_reset (16 samples, 0.05%)</title><rect x="93.3190%" y="261" width="0.0472%" height="15" fill="rgb(222,19,48)" fg:x="31609" fg:w="16"/><text x="93.5690%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (5 samples, 0.01%)</title><rect x="93.3514%" y="245" width="0.0148%" height="15" fill="rgb(232,45,27)" fg:x="31620" fg:w="5"/><text x="93.6014%" y="255.50"></text></g><g><title>libcorecrypto.dylib`vng_aes_encrypt_aesni_key (12 samples, 0.04%)</title><rect x="93.3721%" y="261" width="0.0354%" height="15" fill="rgb(249,103,42)" fg:x="31627" fg:w="12"/><text x="93.6221%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_init (46 samples, 0.14%)</title><rect x="93.2806%" y="277" width="0.1358%" height="15" fill="rgb(246,81,33)" fg:x="31596" fg:w="46"/><text x="93.5306%" y="287.50"></text></g><g><title>libcorecrypto.dylib`AccelerateCrypto_AES_encrypt_aesni (4 samples, 0.01%)</title><rect x="93.4252%" y="261" width="0.0118%" height="15" fill="rgb(252,33,42)" fg:x="31645" fg:w="4"/><text x="93.6752%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_set_iv (11 samples, 0.03%)</title><rect x="93.4164%" y="277" width="0.0325%" height="15" fill="rgb(209,212,41)" fg:x="31642" fg:w="11"/><text x="93.6664%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_update_pad (4 samples, 0.01%)</title><rect x="93.4371%" y="261" width="0.0118%" height="15" fill="rgb(207,154,6)" fg:x="31649" fg:w="4"/><text x="93.6871%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_update_pad (6 samples, 0.02%)</title><rect x="93.4489%" y="277" width="0.0177%" height="15" fill="rgb(223,64,47)" fg:x="31653" fg:w="6"/><text x="93.6989%" y="287.50"></text></g><g><title>libcorecrypto.dylib`gcm_init (12 samples, 0.04%)</title><rect x="93.4695%" y="277" width="0.0354%" height="15" fill="rgb(211,161,38)" fg:x="31660" fg:w="12"/><text x="93.7195%" y="287.50"></text></g><g><title>libcorecrypto.dylib`init_wrapper_aesni (5 samples, 0.01%)</title><rect x="93.5050%" y="277" width="0.0148%" height="15" fill="rgb(219,138,40)" fg:x="31672" fg:w="5"/><text x="93.7550%" y="287.50"></text></g><g><title>libcorecrypto.dylib`vng_aes_encrypt_aesni_key (5 samples, 0.01%)</title><rect x="93.5197%" y="277" width="0.0148%" height="15" fill="rgb(241,228,46)" fg:x="31677" fg:w="5"/><text x="93.7697%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_init_with_iv (94 samples, 0.28%)</title><rect x="93.2747%" y="293" width="0.2775%" height="15" fill="rgb(223,209,38)" fg:x="31594" fg:w="94"/><text x="93.5247%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`_get_cpu_capabilities (6 samples, 0.02%)</title><rect x="93.5345%" y="277" width="0.0177%" height="15" fill="rgb(236,164,45)" fg:x="31682" fg:w="6"/><text x="93.7845%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_init (9 samples, 0.03%)</title><rect x="93.5581%" y="293" width="0.0266%" height="15" fill="rgb(231,15,5)" fg:x="31690" fg:w="9"/><text x="93.8081%" y="303.50"></text></g><g><title>libcoretls.dylib`CCSymmAEADSetIV (10 samples, 0.03%)</title><rect x="93.5876%" y="293" width="0.0295%" height="15" fill="rgb(252,35,15)" fg:x="31700" fg:w="10"/><text x="93.8376%" y="303.50"></text></g><g><title>libcorecrypto.dylib`Main_Decrypt_Loop (494 samples, 1.46%)</title><rect x="93.6850%" y="245" width="1.4584%" height="15" fill="rgb(248,181,18)" fg:x="31733" fg:w="494"/><text x="93.9350%" y="255.50"></text></g><g><title>libcorecrypto.dylib`ccaes_vng_gcm_decrypt (502 samples, 1.48%)</title><rect x="93.6673%" y="261" width="1.4821%" height="15" fill="rgb(233,39,42)" fg:x="31727" fg:w="502"/><text x="93.9173%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_inc_iv (5 samples, 0.01%)</title><rect x="95.1494%" y="261" width="0.0148%" height="15" fill="rgb(238,110,33)" fg:x="32229" fg:w="5"/><text x="95.3994%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_finalize (13 samples, 0.04%)</title><rect x="95.1641%" y="261" width="0.0384%" height="15" fill="rgb(233,195,10)" fg:x="32234" fg:w="13"/><text x="95.4141%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.02%)</title><rect x="95.1789%" y="245" width="0.0236%" height="15" fill="rgb(254,105,3)" fg:x="32239" fg:w="8"/><text x="95.4289%" y="255.50"></text></g><g><title>libcorecrypto.dylib`gcmDecrypt_avx1 (6 samples, 0.02%)</title><rect x="95.2114%" y="261" width="0.0177%" height="15" fill="rgb(221,225,9)" fg:x="32250" fg:w="6"/><text x="95.4614%" y="271.50"></text></g><g><title>libcoretls.dylib`SSLDecryptRecord (551 samples, 1.63%)</title><rect x="93.6171%" y="293" width="1.6267%" height="15" fill="rgb(224,227,45)" fg:x="31710" fg:w="551"/><text x="93.8671%" y="303.50"></text></g><g><title>libcoretls.dylib`CCSymmAEADDecrypt (543 samples, 1.60%)</title><rect x="93.6408%" y="277" width="1.6031%" height="15" fill="rgb(229,198,43)" fg:x="31718" fg:w="543"/><text x="93.8908%" y="287.50"></text></g><g><title>libcoretls.dylib`SSLEncodeUInt64 (4 samples, 0.01%)</title><rect x="95.2439%" y="293" width="0.0118%" height="15" fill="rgb(206,209,35)" fg:x="32261" fg:w="4"/><text x="95.4939%" y="303.50"></text></g><g><title>libcoretls.dylib`tls_record_decrypt (747 samples, 2.21%)</title><rect x="93.2215%" y="309" width="2.2054%" height="15" fill="rgb(245,195,53)" fg:x="31576" fg:w="747"/><text x="93.4715%" y="319.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (58 samples, 0.17%)</title><rect x="95.2557%" y="293" width="0.1712%" height="15" fill="rgb(240,92,26)" fg:x="32265" fg:w="58"/><text x="95.5057%" y="303.50"></text></g><g><title>libcoretls.dylib`tls_record_decrypted_size (28 samples, 0.08%)</title><rect x="95.4269%" y="309" width="0.0827%" height="15" fill="rgb(207,40,23)" fg:x="32323" fg:w="28"/><text x="95.6769%" y="319.50"></text></g><g><title>libcoretls.dylib`tls_record_get_header_size (5 samples, 0.01%)</title><rect x="95.5096%" y="309" width="0.0148%" height="15" fill="rgb(223,111,35)" fg:x="32351" fg:w="5"/><text x="95.7596%" y="319.50"></text></g><g><title>libcoretls.dylib`tls_record_parse_header (16 samples, 0.05%)</title><rect x="95.5243%" y="309" width="0.0472%" height="15" fill="rgb(229,147,28)" fg:x="32356" fg:w="16"/><text x="95.7743%" y="319.50"></text></g><g><title>libcoretls.dylib`SSLDecodeInt (12 samples, 0.04%)</title><rect x="95.5361%" y="293" width="0.0354%" height="15" fill="rgb(211,29,28)" fg:x="32360" fg:w="12"/><text x="95.7861%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.04%)</title><rect x="95.5893%" y="293" width="0.0384%" height="15" fill="rgb(228,72,33)" fg:x="32378" fg:w="13"/><text x="95.8393%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.13%)</title><rect x="95.5716%" y="309" width="0.1299%" height="15" fill="rgb(205,214,31)" fg:x="32372" fg:w="44"/><text x="95.8216%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.07%)</title><rect x="95.6306%" y="293" width="0.0709%" height="15" fill="rgb(224,111,15)" fg:x="32392" fg:w="24"/><text x="95.8806%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (22 samples, 0.06%)</title><rect x="95.6365%" y="277" width="0.0650%" height="15" fill="rgb(253,21,26)" fg:x="32394" fg:w="22"/><text x="95.8865%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (20 samples, 0.06%)</title><rect x="95.7015%" y="309" width="0.0590%" height="15" fill="rgb(245,139,43)" fg:x="32416" fg:w="20"/><text x="95.9515%" y="319.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (4 samples, 0.01%)</title><rect x="95.7723%" y="309" width="0.0118%" height="15" fill="rgb(252,170,7)" fg:x="32440" fg:w="4"/><text x="96.0223%" y="319.50"></text></g><g><title>Security`SSLRecordReadInternal (9,912 samples, 29.26%)</title><rect x="66.5240%" y="325" width="29.2631%" height="15" fill="rgb(231,118,14)" fg:x="22533" fg:w="9912"/><text x="66.7740%" y="335.50">Security`SSLRecordReadInternal</text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (12 samples, 0.04%)</title><rect x="95.7871%" y="325" width="0.0354%" height="15" fill="rgb(238,83,0)" fg:x="32445" fg:w="12"/><text x="96.0371%" y="335.50"></text></g><g><title>ethparser`security_framework::secure_transport::read_func (4 samples, 0.01%)</title><rect x="95.8225%" y="325" width="0.0118%" height="15" fill="rgb(221,39,39)" fg:x="32457" fg:w="4"/><text x="96.0725%" y="335.50"></text></g><g><title>libcoretls.dylib`tls_handshake_continue (14 samples, 0.04%)</title><rect x="95.8343%" y="325" width="0.0413%" height="15" fill="rgb(222,119,46)" fg:x="32461" fg:w="14"/><text x="96.0843%" y="335.50"></text></g><g><title>libcoretls.dylib`tls_record_decrypted_size (4 samples, 0.01%)</title><rect x="95.8845%" y="325" width="0.0118%" height="15" fill="rgb(222,165,49)" fg:x="32478" fg:w="4"/><text x="96.1345%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="95.9052%" y="325" width="0.0118%" height="15" fill="rgb(219,113,52)" fg:x="32485" fg:w="4"/><text x="96.1552%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.02%)</title><rect x="95.9258%" y="325" width="0.0236%" height="15" fill="rgb(214,7,15)" fg:x="32492" fg:w="8"/><text x="96.1758%" y="335.50"></text></g><g><title>Security`SSLRead (10,110 samples, 29.85%)</title><rect x="66.2612%" y="341" width="29.8477%" height="15" fill="rgb(235,32,4)" fg:x="22444" fg:w="10110"/><text x="66.5112%" y="351.50">Security`SSLRead</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (52 samples, 0.15%)</title><rect x="95.9554%" y="325" width="0.1535%" height="15" fill="rgb(238,90,54)" fg:x="32502" fg:w="52"/><text x="96.2054%" y="335.50"></text></g><g><title>Security`SSLRecordReadInternal (10 samples, 0.03%)</title><rect x="96.1177%" y="341" width="0.0295%" height="15" fill="rgb(213,208,19)" fg:x="32557" fg:w="10"/><text x="96.3677%" y="351.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (20 samples, 0.06%)</title><rect x="96.1473%" y="341" width="0.0590%" height="15" fill="rgb(233,156,4)" fg:x="32567" fg:w="20"/><text x="96.3973%" y="351.50"></text></g><g><title>ethparser`security_framework::secure_transport::SslStream&lt;S&gt;::check_panic (6 samples, 0.02%)</title><rect x="96.2063%" y="341" width="0.0177%" height="15" fill="rgb(207,194,5)" fg:x="32587" fg:w="6"/><text x="96.4563%" y="351.50"></text></g><g><title>Security`SSLGetConnection (12 samples, 0.04%)</title><rect x="96.2329%" y="325" width="0.0354%" height="15" fill="rgb(206,111,30)" fg:x="32596" fg:w="12"/><text x="96.4829%" y="335.50"></text></g><g><title>ethparser`security_framework::secure_transport::SslStream&lt;S&gt;::get_error (25 samples, 0.07%)</title><rect x="96.2240%" y="341" width="0.0738%" height="15" fill="rgb(243,70,54)" fg:x="32593" fg:w="25"/><text x="96.4740%" y="351.50"></text></g><g><title>ethparser`security_framework::secure_transport::SslStream&lt;S&gt;::check_panic (7 samples, 0.02%)</title><rect x="96.2772%" y="325" width="0.0207%" height="15" fill="rgb(242,28,8)" fg:x="32611" fg:w="7"/><text x="96.5272%" y="335.50"></text></g><g><title>Security`SSLGetConnection (5 samples, 0.01%)</title><rect x="96.2831%" y="309" width="0.0148%" height="15" fill="rgb(219,106,18)" fg:x="32613" fg:w="5"/><text x="96.5331%" y="319.50"></text></g><g><title>libcoretls.dylib`tls_handshake_continue (23 samples, 0.07%)</title><rect x="96.2978%" y="341" width="0.0679%" height="15" fill="rgb(244,222,10)" fg:x="32618" fg:w="23"/><text x="96.5478%" y="351.50"></text></g><g><title>ethparser`&lt;security_framework::secure_transport::SslStream&lt;S&gt; as std::io::Read&gt;::read (10,234 samples, 30.21%)</title><rect x="66.1579%" y="357" width="30.2137%" height="15" fill="rgb(236,179,52)" fg:x="22409" fg:w="10234"/><text x="66.4079%" y="367.50">ethparser`&lt;security_framework::secure_transport::..</text></g><g><title>ethparser`std::io::error::Error::kind (7 samples, 0.02%)</title><rect x="96.3864%" y="357" width="0.0207%" height="15" fill="rgb(213,23,39)" fg:x="32648" fg:w="7"/><text x="96.6364%" y="367.50"></text></g><g><title>ethparser`&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (10,948 samples, 32.32%)</title><rect x="65.9276%" y="373" width="32.3217%" height="15" fill="rgb(238,48,10)" fg:x="22331" fg:w="10948"/><text x="66.1776%" y="383.50">ethparser`&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (624 samples, 1.84%)</title><rect x="96.4071%" y="357" width="1.8422%" height="15" fill="rgb(251,196,23)" fg:x="32655" fg:w="624"/><text x="96.6571%" y="367.50">l..</text></g><g><title>ethparser`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (11,001 samples, 32.48%)</title><rect x="65.8361%" y="389" width="32.4782%" height="15" fill="rgb(250,152,24)" fg:x="22300" fg:w="11001"/><text x="66.0861%" y="399.50">ethparser`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (14 samples, 0.04%)</title><rect x="98.2729%" y="373" width="0.0413%" height="15" fill="rgb(209,150,17)" fg:x="33287" fg:w="14"/><text x="98.5229%" y="383.50"></text></g><g><title>ethparser`&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (12 samples, 0.04%)</title><rect x="98.3142%" y="389" width="0.0354%" height="15" fill="rgb(234,202,34)" fg:x="33301" fg:w="12"/><text x="98.5642%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (26 samples, 0.08%)</title><rect x="98.4766%" y="309" width="0.0768%" height="15" fill="rgb(253,148,53)" fg:x="33356" fg:w="26"/><text x="98.7266%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 0.25%)</title><rect x="98.3821%" y="373" width="0.2450%" height="15" fill="rgb(218,129,16)" fg:x="33324" fg:w="83"/><text x="98.6321%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (76 samples, 0.22%)</title><rect x="98.4028%" y="357" width="0.2244%" height="15" fill="rgb(216,85,19)" fg:x="33331" fg:w="76"/><text x="98.6528%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (74 samples, 0.22%)</title><rect x="98.4087%" y="341" width="0.2185%" height="15" fill="rgb(235,228,7)" fg:x="33333" fg:w="74"/><text x="98.6587%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (66 samples, 0.19%)</title><rect x="98.4323%" y="325" width="0.1949%" height="15" fill="rgb(245,175,0)" fg:x="33341" fg:w="66"/><text x="98.6823%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (25 samples, 0.07%)</title><rect x="98.5534%" y="309" width="0.0738%" height="15" fill="rgb(208,168,36)" fg:x="33382" fg:w="25"/><text x="98.8034%" y="319.50"></text></g><g><title>ethparser`bytes::bytes_mut::BytesMut::reserve_inner (103 samples, 0.30%)</title><rect x="98.3497%" y="389" width="0.3041%" height="15" fill="rgb(246,171,24)" fg:x="33313" fg:w="103"/><text x="98.5997%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.02%)</title><rect x="98.6360%" y="373" width="0.0177%" height="15" fill="rgb(215,142,24)" fg:x="33410" fg:w="6"/><text x="98.8860%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.01%)</title><rect x="98.6656%" y="389" width="0.0148%" height="15" fill="rgb(250,187,7)" fg:x="33420" fg:w="5"/><text x="98.9156%" y="399.50"></text></g><g><title>ethparser`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (11,151 samples, 32.92%)</title><rect x="65.7711%" y="405" width="32.9210%" height="15" fill="rgb(228,66,33)" fg:x="22278" fg:w="11151"/><text x="66.0211%" y="415.50">ethparser`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_r..</text></g><g><title>ethparser`hyper::proto::h1::io::ReadStrategy::record (7 samples, 0.02%)</title><rect x="98.6921%" y="405" width="0.0207%" height="15" fill="rgb(234,215,21)" fg:x="33429" fg:w="7"/><text x="98.9421%" y="415.50"></text></g><g><title>ethparser`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (11,240 samples, 33.18%)</title><rect x="65.5379%" y="421" width="33.1838%" height="15" fill="rgb(222,191,20)" fg:x="22199" fg:w="11240"/><text x="65.7879%" y="431.50">ethparser`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hype..</text></g><g><title>ethparser`bytes::bytes_mut::BytesMut::split_to (4 samples, 0.01%)</title><rect x="98.7217%" y="421" width="0.0118%" height="15" fill="rgb(245,79,54)" fg:x="33439" fg:w="4"/><text x="98.9717%" y="431.50"></text></g><g><title>ethparser`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (11,306 samples, 33.38%)</title><rect x="65.3696%" y="453" width="33.3786%" height="15" fill="rgb(240,10,37)" fg:x="22142" fg:w="11306"/><text x="65.6196%" y="463.50">ethparser`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_re..</text></g><g><title>ethparser`hyper::proto::h1::decode::Decoder::decode (11,265 samples, 33.26%)</title><rect x="65.4907%" y="437" width="33.2576%" height="15" fill="rgb(214,192,32)" fg:x="22183" fg:w="11265"/><text x="65.7407%" y="447.50">ethparser`hyper::proto::h1::decode::Decoder::decode</text></g><g><title>ethparser`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (5 samples, 0.01%)</title><rect x="98.7335%" y="421" width="0.0148%" height="15" fill="rgb(209,36,54)" fg:x="33443" fg:w="5"/><text x="98.9835%" y="431.50"></text></g><g><title>ethparser`&lt;hyper::proto::h1::role::Client as hyper::proto::h1::Http1Transaction&gt;::parse (5 samples, 0.01%)</title><rect x="98.7482%" y="421" width="0.0148%" height="15" fill="rgb(220,10,11)" fg:x="33448" fg:w="5"/><text x="98.9982%" y="431.50"></text></g><g><title>ethparser`security_framework::secure_transport::read_func (22 samples, 0.06%)</title><rect x="98.7659%" y="325" width="0.0650%" height="15" fill="rgb(221,106,17)" fg:x="33454" fg:w="22"/><text x="99.0159%" y="335.50"></text></g><g><title>ethparser`std::panicking::try (22 samples, 0.06%)</title><rect x="98.7659%" y="309" width="0.0650%" height="15" fill="rgb(251,142,44)" fg:x="33454" fg:w="22"/><text x="99.0159%" y="319.50"></text></g><g><title>ethparser`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (21 samples, 0.06%)</title><rect x="98.7689%" y="293" width="0.0620%" height="15" fill="rgb(238,13,15)" fg:x="33455" fg:w="21"/><text x="99.0189%" y="303.50"></text></g><g><title>ethparser`tokio::net::tcp::stream::TcpStream::poll_read_priv (21 samples, 0.06%)</title><rect x="98.7689%" y="277" width="0.0620%" height="15" fill="rgb(208,107,27)" fg:x="33455" fg:w="21"/><text x="99.0189%" y="287.50"></text></g><g><title>ethparser`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (21 samples, 0.06%)</title><rect x="98.7689%" y="261" width="0.0620%" height="15" fill="rgb(205,136,37)" fg:x="33455" fg:w="21"/><text x="99.0189%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (21 samples, 0.06%)</title><rect x="98.7689%" y="245" width="0.0620%" height="15" fill="rgb(250,205,27)" fg:x="33455" fg:w="21"/><text x="99.0189%" y="255.50"></text></g><g><title>Security`SSLRecordReadInternal (24 samples, 0.07%)</title><rect x="98.7659%" y="341" width="0.0709%" height="15" fill="rgb(210,80,43)" fg:x="33454" fg:w="24"/><text x="99.0159%" y="351.50"></text></g><g><title>Security`SSLRead (25 samples, 0.07%)</title><rect x="98.7659%" y="357" width="0.0738%" height="15" fill="rgb(247,160,36)" fg:x="33454" fg:w="25"/><text x="99.0159%" y="367.50"></text></g><g><title>ethparser`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (32 samples, 0.09%)</title><rect x="98.7482%" y="453" width="0.0945%" height="15" fill="rgb(234,13,49)" fg:x="33448" fg:w="32"/><text x="98.9982%" y="463.50"></text></g><g><title>ethparser`hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (32 samples, 0.09%)</title><rect x="98.7482%" y="437" width="0.0945%" height="15" fill="rgb(234,122,0)" fg:x="33448" fg:w="32"/><text x="98.9982%" y="447.50"></text></g><g><title>ethparser`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (26 samples, 0.08%)</title><rect x="98.7659%" y="421" width="0.0768%" height="15" fill="rgb(207,146,38)" fg:x="33454" fg:w="26"/><text x="99.0159%" y="431.50"></text></g><g><title>ethparser`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (26 samples, 0.08%)</title><rect x="98.7659%" y="405" width="0.0768%" height="15" fill="rgb(207,177,25)" fg:x="33454" fg:w="26"/><text x="99.0159%" y="415.50"></text></g><g><title>ethparser`&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (26 samples, 0.08%)</title><rect x="98.7659%" y="389" width="0.0768%" height="15" fill="rgb(211,178,42)" fg:x="33454" fg:w="26"/><text x="99.0159%" y="399.50"></text></g><g><title>ethparser`&lt;security_framework::secure_transport::SslStream&lt;S&gt; as std::io::Read&gt;::read (26 samples, 0.08%)</title><rect x="98.7659%" y="373" width="0.0768%" height="15" fill="rgb(230,69,54)" fg:x="33454" fg:w="26"/><text x="99.0159%" y="383.50"></text></g><g><title>ethparser`hyper::proto::h1::conn::State::try_keep_alive (5 samples, 0.01%)</title><rect x="98.8516%" y="453" width="0.0148%" height="15" fill="rgb(214,135,41)" fg:x="33483" fg:w="5"/><text x="99.1016%" y="463.50"></text></g><g><title>ethparser`hyper::proto::h1::decode::Decoder::decode (6 samples, 0.02%)</title><rect x="98.8663%" y="453" width="0.0177%" height="15" fill="rgb(237,67,25)" fg:x="33488" fg:w="6"/><text x="99.1163%" y="463.50"></text></g><g><title>ethparser`hyper::proto::h1::io::Buffered&lt;T,B&gt;::can_buffer (10 samples, 0.03%)</title><rect x="98.8840%" y="453" width="0.0295%" height="15" fill="rgb(222,189,50)" fg:x="33494" fg:w="10"/><text x="99.1340%" y="463.50"></text></g><g><title>ethparser`&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="98.8988%" y="437" width="0.0148%" height="15" fill="rgb(245,148,34)" fg:x="33499" fg:w="5"/><text x="99.1488%" y="447.50"></text></g><g><title>Security`SSLGetConnection (4 samples, 0.01%)</title><rect x="98.9903%" y="437" width="0.0118%" height="15" fill="rgb(222,29,6)" fg:x="33530" fg:w="4"/><text x="99.2403%" y="447.50"></text></g><g><title>ethparser`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (10 samples, 0.03%)</title><rect x="99.0051%" y="325" width="0.0295%" height="15" fill="rgb(221,189,43)" fg:x="33535" fg:w="10"/><text x="99.2551%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (10 samples, 0.03%)</title><rect x="99.0051%" y="309" width="0.0295%" height="15" fill="rgb(207,36,27)" fg:x="33535" fg:w="10"/><text x="99.2551%" y="319.50"></text></g><g><title>Security`SSLRecordServiceWriteQueueInternal (11 samples, 0.03%)</title><rect x="99.0051%" y="389" width="0.0325%" height="15" fill="rgb(217,90,24)" fg:x="33535" fg:w="11"/><text x="99.2551%" y="399.50"></text></g><g><title>ethparser`security_framework::secure_transport::write_func (11 samples, 0.03%)</title><rect x="99.0051%" y="373" width="0.0325%" height="15" fill="rgb(224,66,35)" fg:x="33535" fg:w="11"/><text x="99.2551%" y="383.50"></text></g><g><title>ethparser`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write (11 samples, 0.03%)</title><rect x="99.0051%" y="357" width="0.0325%" height="15" fill="rgb(221,13,50)" fg:x="33535" fg:w="11"/><text x="99.2551%" y="367.50"></text></g><g><title>ethparser`tokio::net::tcp::stream::TcpStream::poll_write_priv (11 samples, 0.03%)</title><rect x="99.0051%" y="341" width="0.0325%" height="15" fill="rgb(236,68,49)" fg:x="33535" fg:w="11"/><text x="99.2551%" y="351.50"></text></g><g><title>ethparser`&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write (12 samples, 0.04%)</title><rect x="99.0051%" y="437" width="0.0354%" height="15" fill="rgb(229,146,28)" fg:x="33535" fg:w="12"/><text x="99.2551%" y="447.50"></text></g><g><title>ethparser`tokio_native_tls::TlsStream&lt;S&gt;::with_context (12 samples, 0.04%)</title><rect x="99.0051%" y="421" width="0.0354%" height="15" fill="rgb(225,31,38)" fg:x="33535" fg:w="12"/><text x="99.2551%" y="431.50"></text></g><g><title>Security`SSLWrite (12 samples, 0.04%)</title><rect x="99.0051%" y="405" width="0.0354%" height="15" fill="rgb(250,208,3)" fg:x="33535" fg:w="12"/><text x="99.2551%" y="415.50"></text></g><g><title>ethparser`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (51 samples, 0.15%)</title><rect x="98.9136%" y="453" width="0.1506%" height="15" fill="rgb(246,54,23)" fg:x="33504" fg:w="51"/><text x="99.1636%" y="463.50"></text></g><g><title>ethparser`tokio_native_tls::TlsStream&lt;S&gt;::with_context (8 samples, 0.02%)</title><rect x="99.0405%" y="437" width="0.0236%" height="15" fill="rgb(243,76,11)" fg:x="33547" fg:w="8"/><text x="99.2905%" y="447.50"></text></g><g><title>Security`SSLGetConnection (4 samples, 0.01%)</title><rect x="99.0523%" y="421" width="0.0118%" height="15" fill="rgb(245,21,50)" fg:x="33551" fg:w="4"/><text x="99.3023%" y="431.50"></text></g><g><title>ethparser`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (12,041 samples, 35.55%)</title><rect x="63.5392%" y="469" width="35.5485%" height="15" fill="rgb(228,9,43)" fg:x="21522" fg:w="12041"/><text x="63.7892%" y="479.50">ethparser`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;..</text></g><g><title>ethparser`tokio_native_tls::TlsStream&lt;S&gt;::with_context (7 samples, 0.02%)</title><rect x="99.0671%" y="453" width="0.0207%" height="15" fill="rgb(208,100,47)" fg:x="33556" fg:w="7"/><text x="99.3171%" y="463.50"></text></g><g><title>ethparser`hyper::proto::h1::io::Buffered&lt;T,B&gt;::can_buffer (11 samples, 0.03%)</title><rect x="99.0877%" y="469" width="0.0325%" height="15" fill="rgb(232,26,8)" fg:x="33563" fg:w="11"/><text x="99.3377%" y="479.50"></text></g><g><title>ethparser`&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (12,129 samples, 35.81%)</title><rect x="63.3207%" y="485" width="35.8083%" height="15" fill="rgb(216,166,38)" fg:x="21448" fg:w="12129"/><text x="63.5707%" y="495.50">ethparser`&lt;hyper::client::conn::http1::upgrades::Upgradeab..</text></g><g><title>ethparser`core::ptr::drop_in_place&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;reqwest::connect::Conn,reqwest::async_impl::body::Body&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="99.1291%" y="485" width="0.0118%" height="15" fill="rgb(251,202,51)" fg:x="33577" fg:w="4"/><text x="99.3791%" y="495.50"></text></g><g><title>ethparser`core::ptr::drop_in_place&lt;hyper_util::rt::tokio::TokioIo&lt;tokio_native_tls::TlsStream&lt;hyper_util::rt::tokio::TokioIo&lt;hyper_util::rt::tokio::TokioIo&lt;tokio::net::tcp::stream::TcpStream&gt;&gt;&gt;&gt;&gt; (4 samples, 0.01%)</title><rect x="99.1291%" y="469" width="0.0118%" height="15" fill="rgb(254,216,34)" fg:x="33577" fg:w="4"/><text x="99.3791%" y="479.50"></text></g><g><title>CoreFoundation`_CFRelease (4 samples, 0.01%)</title><rect x="99.1291%" y="453" width="0.0118%" height="15" fill="rgb(251,32,27)" fg:x="33577" fg:w="4"/><text x="99.3791%" y="463.50"></text></g><g><title>Security`SSLContextDestroy (4 samples, 0.01%)</title><rect x="99.1291%" y="437" width="0.0118%" height="15" fill="rgb(208,127,28)" fg:x="33577" fg:w="4"/><text x="99.3791%" y="447.50"></text></g><g><title>ethparser`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (12,155 samples, 35.89%)</title><rect x="63.2971%" y="501" width="35.8851%" height="15" fill="rgb(224,137,22)" fg:x="21440" fg:w="12155"/><text x="63.5471%" y="511.50">ethparser`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as cor..</text></g><g><title>ethparser`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (14 samples, 0.04%)</title><rect x="99.1409%" y="485" width="0.0413%" height="15" fill="rgb(254,70,32)" fg:x="33581" fg:w="14"/><text x="99.3909%" y="495.50"></text></g><g><title>ethparser`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (12,188 samples, 35.98%)</title><rect x="63.2322%" y="517" width="35.9825%" height="15" fill="rgb(229,75,37)" fg:x="21418" fg:w="12188"/><text x="63.4822%" y="527.50">ethparser`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as cor..</text></g><g><title>ethparser`&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (11 samples, 0.03%)</title><rect x="99.1822%" y="501" width="0.0325%" height="15" fill="rgb(252,64,23)" fg:x="33595" fg:w="11"/><text x="99.4322%" y="511.50"></text></g><g><title>ethparser`&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (44 samples, 0.13%)</title><rect x="99.2147%" y="517" width="0.1299%" height="15" fill="rgb(232,162,48)" fg:x="33606" fg:w="44"/><text x="99.4647%" y="527.50"></text></g><g><title>ethparser`tokio::runtime::task::core::TaskIdGuard::enter (8 samples, 0.02%)</title><rect x="99.3446%" y="517" width="0.0236%" height="15" fill="rgb(246,160,12)" fg:x="33650" fg:w="8"/><text x="99.5946%" y="527.50"></text></g><g><title>ethparser`std::panicking::try (12,259 samples, 36.19%)</title><rect x="63.2085%" y="533" width="36.1921%" height="15" fill="rgb(247,166,0)" fg:x="21410" fg:w="12259"/><text x="63.4585%" y="543.50">ethparser`std::panicking::try</text></g><g><title>libdyld.dylib`tlv_get_addr (11 samples, 0.03%)</title><rect x="99.3682%" y="517" width="0.0325%" height="15" fill="rgb(249,219,21)" fg:x="33658" fg:w="11"/><text x="99.6182%" y="527.50"></text></g><g><title>ethparser`tokio::runtime::task::core::TaskIdGuard::enter (13 samples, 0.04%)</title><rect x="99.4095%" y="533" width="0.0384%" height="15" fill="rgb(205,209,3)" fg:x="33672" fg:w="13"/><text x="99.6595%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::task::state::State::transition_to_idle (7 samples, 0.02%)</title><rect x="99.4479%" y="533" width="0.0207%" height="15" fill="rgb(243,44,1)" fg:x="33685" fg:w="7"/><text x="99.6979%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12,345 samples, 36.45%)</title><rect x="63.0462%" y="549" width="36.4460%" height="15" fill="rgb(206,159,16)" fg:x="21355" fg:w="12345"/><text x="63.2962%" y="559.50">ethparser`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>ethparser`tokio::runtime::task::state::State::transition_to_running (8 samples, 0.02%)</title><rect x="99.4686%" y="533" width="0.0236%" height="15" fill="rgb(244,77,30)" fg:x="33692" fg:w="8"/><text x="99.7186%" y="543.50"></text></g><g><title>ethparser`tokio::runtime::task::state::State::transition_to_idle (8 samples, 0.02%)</title><rect x="99.4952%" y="549" width="0.0236%" height="15" fill="rgb(218,69,12)" fg:x="33701" fg:w="8"/><text x="99.7452%" y="559.50"></text></g><g><title>ethparser`tokio::runtime::task::state::State::transition_to_running (5 samples, 0.01%)</title><rect x="99.5188%" y="549" width="0.0148%" height="15" fill="rgb(212,87,7)" fg:x="33709" fg:w="5"/><text x="99.7688%" y="559.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (12,652 samples, 37.35%)</title><rect x="62.1930%" y="565" width="37.3524%" height="15" fill="rgb(245,114,25)" fg:x="21066" fg:w="12652"/><text x="62.4430%" y="575.50">ethparser`tokio::runtime::scheduler::multi_thread::worker::Co..</text></g><g><title>ethparser`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (20 samples, 0.06%)</title><rect x="99.5483%" y="565" width="0.0590%" height="15" fill="rgb(210,61,42)" fg:x="33719" fg:w="20"/><text x="99.7983%" y="575.50"></text></g><g><title>ethparser`tokio::runtime::task::raw::poll (16 samples, 0.05%)</title><rect x="99.6073%" y="565" width="0.0472%" height="15" fill="rgb(211,52,33)" fg:x="33739" fg:w="16"/><text x="99.8573%" y="575.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (13 samples, 0.04%)</title><rect x="99.6546%" y="565" width="0.0384%" height="15" fill="rgb(234,58,33)" fg:x="33755" fg:w="13"/><text x="99.9046%" y="575.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::Context::run (16,880 samples, 49.83%)</title><rect x="49.8908%" y="581" width="49.8347%" height="15" fill="rgb(220,115,36)" fg:x="16899" fg:w="16880"/><text x="50.1408%" y="591.50">ethparser`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>libsystem_c.dylib`clock_gettime (11 samples, 0.03%)</title><rect x="99.6930%" y="565" width="0.0325%" height="15" fill="rgb(243,153,54)" fg:x="33768" fg:w="11"/><text x="99.9430%" y="575.50"></text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.01%)</title><rect x="99.7254%" y="581" width="0.0118%" height="15" fill="rgb(251,47,18)" fg:x="33779" fg:w="4"/><text x="99.9754%" y="591.50"></text></g><g><title>libsystem_m.dylib`0x00007ff80d1d16e0 (80 samples, 0.24%)</title><rect x="99.7372%" y="581" width="0.2362%" height="15" fill="rgb(242,102,42)" fg:x="33783" fg:w="80"/><text x="99.9872%" y="591.50"></text></g><g><title>all (33,872 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(234,31,38)" fg:x="0" fg:w="33872"/><text x="0.2500%" y="767.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (17,015 samples, 50.23%)</title><rect x="49.7668%" y="741" width="50.2332%" height="15" fill="rgb(221,117,51)" fg:x="16857" fg:w="17015"/><text x="50.0168%" y="751.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (17,015 samples, 50.23%)</title><rect x="49.7668%" y="725" width="50.2332%" height="15" fill="rgb(212,20,18)" fg:x="16857" fg:w="17015"/><text x="50.0168%" y="735.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>ethparser`std::sys::pal::unix::thread::Thread::new::thread_start (17,015 samples, 50.23%)</title><rect x="49.7668%" y="709" width="50.2332%" height="15" fill="rgb(245,133,36)" fg:x="16857" fg:w="17015"/><text x="50.0168%" y="719.50">ethparser`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>ethparser`core::ops::function::FnOnce::call_once{{vtable.shim}} (17,015 samples, 50.23%)</title><rect x="49.7668%" y="693" width="50.2332%" height="15" fill="rgb(212,6,19)" fg:x="16857" fg:w="17015"/><text x="50.0168%" y="703.50">ethparser`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>ethparser`std::sys_common::backtrace::__rust_begin_short_backtrace (17,015 samples, 50.23%)</title><rect x="49.7668%" y="677" width="50.2332%" height="15" fill="rgb(218,1,36)" fg:x="16857" fg:w="17015"/><text x="50.0168%" y="687.50">ethparser`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ethparser`tokio::runtime::blocking::pool::Inner::run (17,015 samples, 50.23%)</title><rect x="49.7668%" y="661" width="50.2332%" height="15" fill="rgb(246,84,54)" fg:x="16857" fg:w="17015"/><text x="50.0168%" y="671.50">ethparser`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>ethparser`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (17,014 samples, 50.23%)</title><rect x="49.7697%" y="645" width="50.2303%" height="15" fill="rgb(242,110,6)" fg:x="16858" fg:w="17014"/><text x="50.0197%" y="655.50">ethparser`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>ethparser`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (17,014 samples, 50.23%)</title><rect x="49.7697%" y="629" width="50.2303%" height="15" fill="rgb(214,47,5)" fg:x="16858" fg:w="17014"/><text x="50.0197%" y="639.50">ethparser`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>ethparser`tokio::runtime::scheduler::multi_thread::worker::run (17,012 samples, 50.22%)</title><rect x="49.7756%" y="613" width="50.2244%" height="15" fill="rgb(218,159,25)" fg:x="16860" fg:w="17012"/><text x="50.0256%" y="623.50">ethparser`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>ethparser`tokio::runtime::context::runtime::enter_runtime (17,012 samples, 50.22%)</title><rect x="49.7756%" y="597" width="50.2244%" height="15" fill="rgb(215,211,28)" fg:x="16860" fg:w="17012"/><text x="50.0256%" y="607.50">ethparser`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (9 samples, 0.03%)</title><rect x="99.9734%" y="581" width="0.0266%" height="15" fill="rgb(238,59,32)" fg:x="33863" fg:w="9"/><text x="100.2234%" y="591.50"></text></g></svg></svg>